// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services.proto

package services

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServicesService_Paginate_FullMethodName = "/soustify.datagateway.services.ServicesService/Paginate"
	ServicesService_Count_FullMethodName    = "/soustify.datagateway.services.ServicesService/Count"
	ServicesService_Create_FullMethodName   = "/soustify.datagateway.services.ServicesService/Create"
	ServicesService_Update_FullMethodName   = "/soustify.datagateway.services.ServicesService/Update"
	ServicesService_Inactive_FullMethodName = "/soustify.datagateway.services.ServicesService/Inactive"
	ServicesService_Active_FullMethodName   = "/soustify.datagateway.services.ServicesService/Active"
	ServicesService_FindOne_FullMethodName  = "/soustify.datagateway.services.ServicesService/FindOne"
	ServicesService_Delete_FullMethodName   = "/soustify.datagateway.services.ServicesService/Delete"
)

// ServicesServiceClient is the client API for ServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (ServicesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (ServicesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (ServicesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (ServicesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (ServicesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ServicesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (ServicesService_DeleteClient, error)
}

type servicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesServiceClient(cc grpc.ClientConnInterface) ServicesServiceClient {
	return &servicesServiceClient{cc}
}

func (c *servicesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (ServicesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicesService_ServiceDesc.Streams[0], ServicesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServicesService_PaginateClient interface {
	Recv() (*ServicesResponse, error)
	grpc.ClientStream
}

type servicesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *servicesServicePaginateClient) Recv() (*ServicesResponse, error) {
	m := new(ServicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, ServicesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (ServicesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicesService_ServiceDesc.Streams[1], ServicesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesServiceCreateClient{stream}
	return x, nil
}

type ServicesService_CreateClient interface {
	Send(*ServicesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type servicesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *servicesServiceCreateClient) Send(m *ServicesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (ServicesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicesService_ServiceDesc.Streams[2], ServicesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesServiceUpdateClient{stream}
	return x, nil
}

type ServicesService_UpdateClient interface {
	Send(*ServicesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type servicesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *servicesServiceUpdateClient) Send(m *ServicesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (ServicesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicesService_ServiceDesc.Streams[3], ServicesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesServiceInactiveClient{stream}
	return x, nil
}

type ServicesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type servicesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *servicesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (ServicesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicesService_ServiceDesc.Streams[4], ServicesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesServiceActiveClient{stream}
	return x, nil
}

type ServicesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type servicesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *servicesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ServicesResponse, error) {
	out := new(ServicesResponse)
	err := c.cc.Invoke(ctx, ServicesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (ServicesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicesService_ServiceDesc.Streams[5], ServicesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesServiceDeleteClient{stream}
	return x, nil
}

type ServicesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type servicesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *servicesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServicesServiceServer is the server API for ServicesService service.
// All implementations must embed UnimplementedServicesServiceServer
// for forward compatibility
type ServicesServiceServer interface {
	Paginate(*input.PaginationRequest, ServicesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(ServicesService_CreateServer) error
	Update(ServicesService_UpdateServer) error
	Inactive(ServicesService_InactiveServer) error
	Active(ServicesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*ServicesResponse, error)
	Delete(ServicesService_DeleteServer) error
	mustEmbedUnimplementedServicesServiceServer()
}

// UnimplementedServicesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServiceServer struct {
}

func (UnimplementedServicesServiceServer) Paginate(*input.PaginationRequest, ServicesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedServicesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedServicesServiceServer) Create(ServicesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServicesServiceServer) Update(ServicesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServicesServiceServer) Inactive(ServicesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedServicesServiceServer) Active(ServicesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedServicesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*ServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedServicesServiceServer) Delete(ServicesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServicesServiceServer) mustEmbedUnimplementedServicesServiceServer() {}

// UnsafeServicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServiceServer will
// result in compilation errors.
type UnsafeServicesServiceServer interface {
	mustEmbedUnimplementedServicesServiceServer()
}

func RegisterServicesServiceServer(s grpc.ServiceRegistrar, srv ServicesServiceServer) {
	s.RegisterService(&ServicesService_ServiceDesc, srv)
}

func _ServicesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicesServiceServer).Paginate(m, &servicesServicePaginateServer{stream})
}

type ServicesService_PaginateServer interface {
	Send(*ServicesResponse) error
	grpc.ServerStream
}

type servicesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *servicesServicePaginateServer) Send(m *ServicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ServicesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServiceServer).Create(&servicesServiceCreateServer{stream})
}

type ServicesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*ServicesRequest, error)
	grpc.ServerStream
}

type servicesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *servicesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesServiceCreateServer) Recv() (*ServicesRequest, error) {
	m := new(ServicesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServicesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServiceServer).Update(&servicesServiceUpdateServer{stream})
}

type ServicesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*ServicesRequest, error)
	grpc.ServerStream
}

type servicesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *servicesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesServiceUpdateServer) Recv() (*ServicesRequest, error) {
	m := new(ServicesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServicesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServiceServer).Inactive(&servicesServiceInactiveServer{stream})
}

type ServicesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type servicesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *servicesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServicesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServiceServer).Active(&servicesServiceActiveServer{stream})
}

type ServicesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type servicesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *servicesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServicesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServiceServer).Delete(&servicesServiceDeleteServer{stream})
}

type ServicesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type servicesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *servicesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServicesService_ServiceDesc is the grpc.ServiceDesc for ServicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.services.ServicesService",
	HandlerType: (*ServicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _ServicesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _ServicesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _ServicesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _ServicesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _ServicesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _ServicesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _ServicesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _ServicesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}
