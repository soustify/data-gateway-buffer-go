// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services.proto

package services

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	input "github.com/soustify/data-gateway-buffer-go/pkg/input"

	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = input.StatusRequest(0)

	_ = output.StatusResponse(0)
)

// define the regex for a UUID once up-front
var _services_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ServicesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServicesRequestMultiError, or nil if none found.
func (m *ServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ServicesRequest_EnStatus_InLookup[m.GetEnStatus()]; !ok {
		err := ServicesRequestValidationError{
			field:  "EnStatus",
			reason: "value must be in list [ENABLED DISABLED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		err := ServicesRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 200 {
		err := ServicesRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServicesRequestMultiError(errors)
	}

	return nil
}

// ServicesRequestMultiError is an error wrapping multiple validation errors
// returned by ServicesRequest.ValidateAll() if the designated constraints
// aren't met.
type ServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesRequestMultiError) AllErrors() []error { return m }

// ServicesRequestValidationError is the validation error returned by
// ServicesRequest.Validate if the designated constraints aren't met.
type ServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesRequestValidationError) ErrorName() string { return "ServicesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesRequestValidationError{}

var _ServicesRequest_EnStatus_InLookup = map[input.StatusRequest]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on ServicesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServicesResponseMultiError, or nil if none found.
func (m *ServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ServicesResponseValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		err := ServicesResponseValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 200 {
		err := ServicesResponseValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdAuditable()); err != nil {
		err = ServicesResponseValidationError{
			field:  "IdAuditable",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ServicesResponseMultiError(errors)
	}

	return nil
}

func (m *ServicesResponse) _validateUuid(uuid string) error {
	if matched := _services_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServicesResponseMultiError is an error wrapping multiple validation errors
// returned by ServicesResponse.ValidateAll() if the designated constraints
// aren't met.
type ServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesResponseMultiError) AllErrors() []error { return m }

// ServicesResponseValidationError is the validation error returned by
// ServicesResponse.Validate if the designated constraints aren't met.
type ServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesResponseValidationError) ErrorName() string { return "ServicesResponseValidationError" }

// Error satisfies the builtin error interface
func (e ServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesResponseValidationError{}
