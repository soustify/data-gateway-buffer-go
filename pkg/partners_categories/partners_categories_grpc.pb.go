// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: partners_categories.proto

package partners_categories

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnersCategoriesService_Paginate_FullMethodName = "/partners_categories.PartnersCategoriesService/Paginate"
	PartnersCategoriesService_Count_FullMethodName    = "/partners_categories.PartnersCategoriesService/Count"
	PartnersCategoriesService_Create_FullMethodName   = "/partners_categories.PartnersCategoriesService/Create"
	PartnersCategoriesService_Update_FullMethodName   = "/partners_categories.PartnersCategoriesService/Update"
	PartnersCategoriesService_Inactive_FullMethodName = "/partners_categories.PartnersCategoriesService/Inactive"
	PartnersCategoriesService_Active_FullMethodName   = "/partners_categories.PartnersCategoriesService/Active"
	PartnersCategoriesService_FindOne_FullMethodName  = "/partners_categories.PartnersCategoriesService/FindOne"
	PartnersCategoriesService_Delete_FullMethodName   = "/partners_categories.PartnersCategoriesService/Delete"
)

// PartnersCategoriesServiceClient is the client API for PartnersCategoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnersCategoriesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersCategoriesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersCategoriesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_DeleteClient, error)
}

type partnersCategoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnersCategoriesServiceClient(cc grpc.ClientConnInterface) PartnersCategoriesServiceClient {
	return &partnersCategoriesServiceClient{cc}
}

func (c *partnersCategoriesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersCategoriesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersCategoriesService_ServiceDesc.Streams[0], PartnersCategoriesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersCategoriesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartnersCategoriesService_PaginateClient interface {
	Recv() (*PartnersCategoriesResponse, error)
	grpc.ClientStream
}

type partnersCategoriesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *partnersCategoriesServicePaginateClient) Recv() (*PartnersCategoriesResponse, error) {
	m := new(PartnersCategoriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersCategoriesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, PartnersCategoriesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersCategoriesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersCategoriesService_ServiceDesc.Streams[1], PartnersCategoriesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersCategoriesServiceCreateClient{stream}
	return x, nil
}

type PartnersCategoriesService_CreateClient interface {
	Send(*PartnersCategoriesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersCategoriesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *partnersCategoriesServiceCreateClient) Send(m *PartnersCategoriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersCategoriesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersCategoriesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersCategoriesService_ServiceDesc.Streams[2], PartnersCategoriesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersCategoriesServiceUpdateClient{stream}
	return x, nil
}

type PartnersCategoriesService_UpdateClient interface {
	Send(*PartnersCategoriesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersCategoriesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *partnersCategoriesServiceUpdateClient) Send(m *PartnersCategoriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersCategoriesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersCategoriesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersCategoriesService_ServiceDesc.Streams[3], PartnersCategoriesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersCategoriesServiceInactiveClient{stream}
	return x, nil
}

type PartnersCategoriesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersCategoriesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *partnersCategoriesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersCategoriesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersCategoriesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersCategoriesService_ServiceDesc.Streams[4], PartnersCategoriesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersCategoriesServiceActiveClient{stream}
	return x, nil
}

type PartnersCategoriesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersCategoriesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *partnersCategoriesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersCategoriesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersCategoriesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersCategoriesResponse, error) {
	out := new(PartnersCategoriesResponse)
	err := c.cc.Invoke(ctx, PartnersCategoriesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersCategoriesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersCategoriesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersCategoriesService_ServiceDesc.Streams[5], PartnersCategoriesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersCategoriesServiceDeleteClient{stream}
	return x, nil
}

type PartnersCategoriesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersCategoriesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *partnersCategoriesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersCategoriesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersCategoriesServiceServer is the server API for PartnersCategoriesService service.
// All implementations must embed UnimplementedPartnersCategoriesServiceServer
// for forward compatibility
type PartnersCategoriesServiceServer interface {
	Paginate(*input.PaginationRequest, PartnersCategoriesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(PartnersCategoriesService_CreateServer) error
	Update(PartnersCategoriesService_UpdateServer) error
	Inactive(PartnersCategoriesService_InactiveServer) error
	Active(PartnersCategoriesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*PartnersCategoriesResponse, error)
	Delete(PartnersCategoriesService_DeleteServer) error
	mustEmbedUnimplementedPartnersCategoriesServiceServer()
}

// UnimplementedPartnersCategoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnersCategoriesServiceServer struct {
}

func (UnimplementedPartnersCategoriesServiceServer) Paginate(*input.PaginationRequest, PartnersCategoriesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) Create(PartnersCategoriesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) Update(PartnersCategoriesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) Inactive(PartnersCategoriesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) Active(PartnersCategoriesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*PartnersCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) Delete(PartnersCategoriesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPartnersCategoriesServiceServer) mustEmbedUnimplementedPartnersCategoriesServiceServer() {
}

// UnsafePartnersCategoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnersCategoriesServiceServer will
// result in compilation errors.
type UnsafePartnersCategoriesServiceServer interface {
	mustEmbedUnimplementedPartnersCategoriesServiceServer()
}

func RegisterPartnersCategoriesServiceServer(s grpc.ServiceRegistrar, srv PartnersCategoriesServiceServer) {
	s.RegisterService(&PartnersCategoriesService_ServiceDesc, srv)
}

func _PartnersCategoriesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartnersCategoriesServiceServer).Paginate(m, &partnersCategoriesServicePaginateServer{stream})
}

type PartnersCategoriesService_PaginateServer interface {
	Send(*PartnersCategoriesResponse) error
	grpc.ServerStream
}

type partnersCategoriesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *partnersCategoriesServicePaginateServer) Send(m *PartnersCategoriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PartnersCategoriesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersCategoriesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersCategoriesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersCategoriesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersCategoriesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersCategoriesServiceServer).Create(&partnersCategoriesServiceCreateServer{stream})
}

type PartnersCategoriesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersCategoriesRequest, error)
	grpc.ServerStream
}

type partnersCategoriesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *partnersCategoriesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersCategoriesServiceCreateServer) Recv() (*PartnersCategoriesRequest, error) {
	m := new(PartnersCategoriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersCategoriesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersCategoriesServiceServer).Update(&partnersCategoriesServiceUpdateServer{stream})
}

type PartnersCategoriesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersCategoriesRequest, error)
	grpc.ServerStream
}

type partnersCategoriesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *partnersCategoriesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersCategoriesServiceUpdateServer) Recv() (*PartnersCategoriesRequest, error) {
	m := new(PartnersCategoriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersCategoriesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersCategoriesServiceServer).Inactive(&partnersCategoriesServiceInactiveServer{stream})
}

type PartnersCategoriesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersCategoriesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *partnersCategoriesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersCategoriesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersCategoriesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersCategoriesServiceServer).Active(&partnersCategoriesServiceActiveServer{stream})
}

type PartnersCategoriesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersCategoriesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *partnersCategoriesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersCategoriesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersCategoriesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersCategoriesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersCategoriesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersCategoriesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersCategoriesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersCategoriesServiceServer).Delete(&partnersCategoriesServiceDeleteServer{stream})
}

type PartnersCategoriesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersCategoriesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *partnersCategoriesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersCategoriesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersCategoriesService_ServiceDesc is the grpc.ServiceDesc for PartnersCategoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnersCategoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partners_categories.PartnersCategoriesService",
	HandlerType: (*PartnersCategoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _PartnersCategoriesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PartnersCategoriesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _PartnersCategoriesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _PartnersCategoriesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _PartnersCategoriesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _PartnersCategoriesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _PartnersCategoriesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _PartnersCategoriesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "partners_categories.proto",
}
