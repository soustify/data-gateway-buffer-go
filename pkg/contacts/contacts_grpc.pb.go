// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: contacts.proto

package contacts

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContactsService_Paginate_FullMethodName = "/contacts.ContactsService/Paginate"
	ContactsService_Count_FullMethodName    = "/contacts.ContactsService/Count"
	ContactsService_Create_FullMethodName   = "/contacts.ContactsService/Create"
	ContactsService_Update_FullMethodName   = "/contacts.ContactsService/Update"
	ContactsService_Inactive_FullMethodName = "/contacts.ContactsService/Inactive"
	ContactsService_Active_FullMethodName   = "/contacts.ContactsService/Active"
	ContactsService_FindOne_FullMethodName  = "/contacts.ContactsService/FindOne"
	ContactsService_Delete_FullMethodName   = "/contacts.ContactsService/Delete"
)

// ContactsServiceClient is the client API for ContactsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (ContactsService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (ContactsService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (ContactsService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (ContactsService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (ContactsService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ContactsResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (ContactsService_DeleteClient, error)
}

type contactsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsServiceClient(cc grpc.ClientConnInterface) ContactsServiceClient {
	return &contactsServiceClient{cc}
}

func (c *contactsServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (ContactsService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactsService_ServiceDesc.Streams[0], ContactsService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactsServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactsService_PaginateClient interface {
	Recv() (*ContactsResponse, error)
	grpc.ClientStream
}

type contactsServicePaginateClient struct {
	grpc.ClientStream
}

func (x *contactsServicePaginateClient) Recv() (*ContactsResponse, error) {
	m := new(ContactsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactsServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, ContactsService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (ContactsService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactsService_ServiceDesc.Streams[1], ContactsService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactsServiceCreateClient{stream}
	return x, nil
}

type ContactsService_CreateClient interface {
	Send(*ContactsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type contactsServiceCreateClient struct {
	grpc.ClientStream
}

func (x *contactsServiceCreateClient) Send(m *ContactsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contactsServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactsServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (ContactsService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactsService_ServiceDesc.Streams[2], ContactsService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactsServiceUpdateClient{stream}
	return x, nil
}

type ContactsService_UpdateClient interface {
	Send(*ContactsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type contactsServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *contactsServiceUpdateClient) Send(m *ContactsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contactsServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactsServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (ContactsService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactsService_ServiceDesc.Streams[3], ContactsService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactsServiceInactiveClient{stream}
	return x, nil
}

type ContactsService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type contactsServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *contactsServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contactsServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactsServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (ContactsService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactsService_ServiceDesc.Streams[4], ContactsService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactsServiceActiveClient{stream}
	return x, nil
}

type ContactsService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type contactsServiceActiveClient struct {
	grpc.ClientStream
}

func (x *contactsServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contactsServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactsServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ContactsResponse, error) {
	out := new(ContactsResponse)
	err := c.cc.Invoke(ctx, ContactsService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (ContactsService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactsService_ServiceDesc.Streams[5], ContactsService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactsServiceDeleteClient{stream}
	return x, nil
}

type ContactsService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type contactsServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *contactsServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contactsServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContactsServiceServer is the server API for ContactsService service.
// All implementations must embed UnimplementedContactsServiceServer
// for forward compatibility
type ContactsServiceServer interface {
	Paginate(*input.PaginationRequest, ContactsService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(ContactsService_CreateServer) error
	Update(ContactsService_UpdateServer) error
	Inactive(ContactsService_InactiveServer) error
	Active(ContactsService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*ContactsResponse, error)
	Delete(ContactsService_DeleteServer) error
	mustEmbedUnimplementedContactsServiceServer()
}

// UnimplementedContactsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContactsServiceServer struct {
}

func (UnimplementedContactsServiceServer) Paginate(*input.PaginationRequest, ContactsService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedContactsServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedContactsServiceServer) Create(ContactsService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContactsServiceServer) Update(ContactsService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContactsServiceServer) Inactive(ContactsService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedContactsServiceServer) Active(ContactsService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedContactsServiceServer) FindOne(context.Context, *input.UUIDRequest) (*ContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedContactsServiceServer) Delete(ContactsService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContactsServiceServer) mustEmbedUnimplementedContactsServiceServer() {}

// UnsafeContactsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsServiceServer will
// result in compilation errors.
type UnsafeContactsServiceServer interface {
	mustEmbedUnimplementedContactsServiceServer()
}

func RegisterContactsServiceServer(s grpc.ServiceRegistrar, srv ContactsServiceServer) {
	s.RegisterService(&ContactsService_ServiceDesc, srv)
}

func _ContactsService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactsServiceServer).Paginate(m, &contactsServicePaginateServer{stream})
}

type ContactsService_PaginateServer interface {
	Send(*ContactsResponse) error
	grpc.ServerStream
}

type contactsServicePaginateServer struct {
	grpc.ServerStream
}

func (x *contactsServicePaginateServer) Send(m *ContactsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactsService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContactsServiceServer).Create(&contactsServiceCreateServer{stream})
}

type ContactsService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*ContactsRequest, error)
	grpc.ServerStream
}

type contactsServiceCreateServer struct {
	grpc.ServerStream
}

func (x *contactsServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contactsServiceCreateServer) Recv() (*ContactsRequest, error) {
	m := new(ContactsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContactsService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContactsServiceServer).Update(&contactsServiceUpdateServer{stream})
}

type ContactsService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*ContactsRequest, error)
	grpc.ServerStream
}

type contactsServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *contactsServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contactsServiceUpdateServer) Recv() (*ContactsRequest, error) {
	m := new(ContactsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContactsService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContactsServiceServer).Inactive(&contactsServiceInactiveServer{stream})
}

type ContactsService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type contactsServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *contactsServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contactsServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContactsService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContactsServiceServer).Active(&contactsServiceActiveServer{stream})
}

type ContactsService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type contactsServiceActiveServer struct {
	grpc.ServerStream
}

func (x *contactsServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contactsServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContactsService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactsService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContactsServiceServer).Delete(&contactsServiceDeleteServer{stream})
}

type ContactsService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type contactsServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *contactsServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contactsServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContactsService_ServiceDesc is the grpc.ServiceDesc for ContactsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contacts.ContactsService",
	HandlerType: (*ContactsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _ContactsService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _ContactsService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _ContactsService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _ContactsService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _ContactsService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _ContactsService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _ContactsService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _ContactsService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "contacts.proto",
}
