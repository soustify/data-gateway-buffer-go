// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: categories_services.proto

package categories_services

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CategoriesServicesService_Paginate_FullMethodName = "/categories_services.CategoriesServicesService/Paginate"
	CategoriesServicesService_Count_FullMethodName    = "/categories_services.CategoriesServicesService/Count"
	CategoriesServicesService_Create_FullMethodName   = "/categories_services.CategoriesServicesService/Create"
	CategoriesServicesService_Update_FullMethodName   = "/categories_services.CategoriesServicesService/Update"
	CategoriesServicesService_Inactive_FullMethodName = "/categories_services.CategoriesServicesService/Inactive"
	CategoriesServicesService_Active_FullMethodName   = "/categories_services.CategoriesServicesService/Active"
	CategoriesServicesService_FindOne_FullMethodName  = "/categories_services.CategoriesServicesService/FindOne"
	CategoriesServicesService_Delete_FullMethodName   = "/categories_services.CategoriesServicesService/Delete"
)

// CategoriesServicesServiceClient is the client API for CategoriesServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriesServicesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (CategoriesServicesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*CategoriesServicesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_DeleteClient, error)
}

type categoriesServicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesServicesServiceClient(cc grpc.ClientConnInterface) CategoriesServicesServiceClient {
	return &categoriesServicesServiceClient{cc}
}

func (c *categoriesServicesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (CategoriesServicesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesServicesService_ServiceDesc.Streams[0], CategoriesServicesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServicesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoriesServicesService_PaginateClient interface {
	Recv() (*CategoriesServicesResponse, error)
	grpc.ClientStream
}

type categoriesServicesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *categoriesServicesServicePaginateClient) Recv() (*CategoriesServicesResponse, error) {
	m := new(CategoriesServicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServicesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, CategoriesServicesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServicesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesServicesService_ServiceDesc.Streams[1], CategoriesServicesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServicesServiceCreateClient{stream}
	return x, nil
}

type CategoriesServicesService_CreateClient interface {
	Send(*CategoriesServicesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type categoriesServicesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *categoriesServicesServiceCreateClient) Send(m *CategoriesServicesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServicesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServicesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesServicesService_ServiceDesc.Streams[2], CategoriesServicesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServicesServiceUpdateClient{stream}
	return x, nil
}

type CategoriesServicesService_UpdateClient interface {
	Send(*CategoriesServicesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type categoriesServicesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *categoriesServicesServiceUpdateClient) Send(m *CategoriesServicesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServicesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServicesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesServicesService_ServiceDesc.Streams[3], CategoriesServicesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServicesServiceInactiveClient{stream}
	return x, nil
}

type CategoriesServicesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type categoriesServicesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *categoriesServicesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServicesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServicesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesServicesService_ServiceDesc.Streams[4], CategoriesServicesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServicesServiceActiveClient{stream}
	return x, nil
}

type CategoriesServicesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type categoriesServicesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *categoriesServicesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServicesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServicesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*CategoriesServicesResponse, error) {
	out := new(CategoriesServicesResponse)
	err := c.cc.Invoke(ctx, CategoriesServicesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServicesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (CategoriesServicesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesServicesService_ServiceDesc.Streams[5], CategoriesServicesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServicesServiceDeleteClient{stream}
	return x, nil
}

type CategoriesServicesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type categoriesServicesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *categoriesServicesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServicesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoriesServicesServiceServer is the server API for CategoriesServicesService service.
// All implementations must embed UnimplementedCategoriesServicesServiceServer
// for forward compatibility
type CategoriesServicesServiceServer interface {
	Paginate(*input.PaginationRequest, CategoriesServicesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(CategoriesServicesService_CreateServer) error
	Update(CategoriesServicesService_UpdateServer) error
	Inactive(CategoriesServicesService_InactiveServer) error
	Active(CategoriesServicesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*CategoriesServicesResponse, error)
	Delete(CategoriesServicesService_DeleteServer) error
	mustEmbedUnimplementedCategoriesServicesServiceServer()
}

// UnimplementedCategoriesServicesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoriesServicesServiceServer struct {
}

func (UnimplementedCategoriesServicesServiceServer) Paginate(*input.PaginationRequest, CategoriesServicesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) Create(CategoriesServicesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) Update(CategoriesServicesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) Inactive(CategoriesServicesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) Active(CategoriesServicesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*CategoriesServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) Delete(CategoriesServicesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) mustEmbedUnimplementedCategoriesServicesServiceServer() {
}

// UnsafeCategoriesServicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriesServicesServiceServer will
// result in compilation errors.
type UnsafeCategoriesServicesServiceServer interface {
	mustEmbedUnimplementedCategoriesServicesServiceServer()
}

func RegisterCategoriesServicesServiceServer(s grpc.ServiceRegistrar, srv CategoriesServicesServiceServer) {
	s.RegisterService(&CategoriesServicesService_ServiceDesc, srv)
}

func _CategoriesServicesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoriesServicesServiceServer).Paginate(m, &categoriesServicesServicePaginateServer{stream})
}

type CategoriesServicesService_PaginateServer interface {
	Send(*CategoriesServicesResponse) error
	grpc.ServerStream
}

type categoriesServicesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *categoriesServicesServicePaginateServer) Send(m *CategoriesServicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CategoriesServicesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServicesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServicesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServicesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServicesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServicesServiceServer).Create(&categoriesServicesServiceCreateServer{stream})
}

type CategoriesServicesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*CategoriesServicesRequest, error)
	grpc.ServerStream
}

type categoriesServicesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *categoriesServicesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServicesServiceCreateServer) Recv() (*CategoriesServicesRequest, error) {
	m := new(CategoriesServicesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesServicesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServicesServiceServer).Update(&categoriesServicesServiceUpdateServer{stream})
}

type CategoriesServicesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*CategoriesServicesRequest, error)
	grpc.ServerStream
}

type categoriesServicesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *categoriesServicesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServicesServiceUpdateServer) Recv() (*CategoriesServicesRequest, error) {
	m := new(CategoriesServicesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesServicesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServicesServiceServer).Inactive(&categoriesServicesServiceInactiveServer{stream})
}

type CategoriesServicesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type categoriesServicesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *categoriesServicesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServicesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesServicesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServicesServiceServer).Active(&categoriesServicesServiceActiveServer{stream})
}

type CategoriesServicesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type categoriesServicesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *categoriesServicesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServicesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesServicesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServicesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServicesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServicesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServicesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServicesServiceServer).Delete(&categoriesServicesServiceDeleteServer{stream})
}

type CategoriesServicesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type categoriesServicesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *categoriesServicesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServicesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoriesServicesService_ServiceDesc is the grpc.ServiceDesc for CategoriesServicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriesServicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "categories_services.CategoriesServicesService",
	HandlerType: (*CategoriesServicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _CategoriesServicesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _CategoriesServicesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _CategoriesServicesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _CategoriesServicesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _CategoriesServicesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _CategoriesServicesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _CategoriesServicesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _CategoriesServicesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "categories_services.proto",
}
