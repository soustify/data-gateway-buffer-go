// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: categories_services.proto

package categories_services

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_Paginate_FullMethodName = "/categories_services.Service/Paginate"
	Service_Count_FullMethodName    = "/categories_services.Service/Count"
	Service_Create_FullMethodName   = "/categories_services.Service/Create"
	Service_Update_FullMethodName   = "/categories_services.Service/Update"
	Service_Inactive_FullMethodName = "/categories_services.Service/Inactive"
	Service_Active_FullMethodName   = "/categories_services.Service/Active"
	Service_FindOne_FullMethodName  = "/categories_services.Service/FindOne"
	Service_Delete_FullMethodName   = "/categories_services.Service/Delete"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (Service_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (Service_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (Service_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (Service_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (Service_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (Service_DeleteClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (Service_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &servicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_PaginateClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type servicePaginateClient struct {
	grpc.ClientStream
}

func (x *servicePaginateClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, Service_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Create(ctx context.Context, opts ...grpc.CallOption) (Service_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], Service_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceCreateClient{stream}
	return x, nil
}

type Service_CreateClient interface {
	Send(*Request) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type serviceCreateClient struct {
	grpc.ClientStream
}

func (x *serviceCreateClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Update(ctx context.Context, opts ...grpc.CallOption) (Service_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[2], Service_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceUpdateClient{stream}
	return x, nil
}

type Service_UpdateClient interface {
	Send(*Request) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type serviceUpdateClient struct {
	grpc.ClientStream
}

func (x *serviceUpdateClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (Service_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[3], Service_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceInactiveClient{stream}
	return x, nil
}

type Service_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type serviceInactiveClient struct {
	grpc.ClientStream
}

func (x *serviceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Active(ctx context.Context, opts ...grpc.CallOption) (Service_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[4], Service_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceActiveClient{stream}
	return x, nil
}

type Service_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type serviceActiveClient struct {
	grpc.ClientStream
}

func (x *serviceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Service_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (Service_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[5], Service_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDeleteClient{stream}
	return x, nil
}

type Service_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type serviceDeleteClient struct {
	grpc.ClientStream
}

func (x *serviceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Paginate(*input.PaginationRequest, Service_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(Service_CreateServer) error
	Update(Service_UpdateServer) error
	Inactive(Service_InactiveServer) error
	Active(Service_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*Response, error)
	Delete(Service_DeleteServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Paginate(*input.PaginationRequest, Service_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedServiceServer) Create(Service_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceServer) Update(Service_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceServer) Inactive(Service_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedServiceServer) Active(Service_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedServiceServer) FindOne(context.Context, *input.UUIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedServiceServer) Delete(Service_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Paginate(m, &servicePaginateServer{stream})
}

type Service_PaginateServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type servicePaginateServer struct {
	grpc.ServerStream
}

func (x *servicePaginateServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Create(&serviceCreateServer{stream})
}

type Service_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceCreateServer struct {
	grpc.ServerStream
}

func (x *serviceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceCreateServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Update(&serviceUpdateServer{stream})
}

type Service_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type serviceUpdateServer struct {
	grpc.ServerStream
}

func (x *serviceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceUpdateServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Inactive(&serviceInactiveServer{stream})
}

type Service_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type serviceInactiveServer struct {
	grpc.ServerStream
}

func (x *serviceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Active(&serviceActiveServer{stream})
}

type Service_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type serviceActiveServer struct {
	grpc.ServerStream
}

func (x *serviceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Delete(&serviceDeleteServer{stream})
}

type Service_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type serviceDeleteServer struct {
	grpc.ServerStream
}

func (x *serviceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "categories_services.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _Service_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _Service_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _Service_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _Service_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _Service_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _Service_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _Service_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _Service_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "categories_services.proto",
}
