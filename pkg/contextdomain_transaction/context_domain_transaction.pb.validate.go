// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: context_domain_transaction.proto

package contextdomain_transaction

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _context_domain_transaction_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ContextDomainTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContextDomainTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContextDomainTransactionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContextDomainTransactionRequestMultiError, or nil if none found.
func (m *ContextDomainTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContextDomainTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ContextDomainTransactionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ContextDomainTransactionRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserPool()) < 10 {
		err := ContextDomainTransactionRequestValidationError{
			field:  "UserPool",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContextDomainTransactionRequestMultiError(errors)
	}

	return nil
}

func (m *ContextDomainTransactionRequest) _validateUuid(uuid string) error {
	if matched := _context_domain_transaction_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ContextDomainTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by ContextDomainTransactionRequest.ValidateAll()
// if the designated constraints aren't met.
type ContextDomainTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContextDomainTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContextDomainTransactionRequestMultiError) AllErrors() []error { return m }

// ContextDomainTransactionRequestValidationError is the validation error
// returned by ContextDomainTransactionRequest.Validate if the designated
// constraints aren't met.
type ContextDomainTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextDomainTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextDomainTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextDomainTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextDomainTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextDomainTransactionRequestValidationError) ErrorName() string {
	return "ContextDomainTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContextDomainTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContextDomainTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextDomainTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextDomainTransactionRequestValidationError{}

// Validate checks the field values on ContextDomainTransactionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ContextDomainTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContextDomainTransactionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContextDomainTransactionResponseMultiError, or nil if none found.
func (m *ContextDomainTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContextDomainTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserPool

	if len(errors) > 0 {
		return ContextDomainTransactionResponseMultiError(errors)
	}

	return nil
}

// ContextDomainTransactionResponseMultiError is an error wrapping multiple
// validation errors returned by
// ContextDomainTransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type ContextDomainTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContextDomainTransactionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContextDomainTransactionResponseMultiError) AllErrors() []error { return m }

// ContextDomainTransactionResponseValidationError is the validation error
// returned by ContextDomainTransactionResponse.Validate if the designated
// constraints aren't met.
type ContextDomainTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextDomainTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextDomainTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextDomainTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextDomainTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextDomainTransactionResponseValidationError) ErrorName() string {
	return "ContextDomainTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContextDomainTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContextDomainTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextDomainTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextDomainTransactionResponseValidationError{}
