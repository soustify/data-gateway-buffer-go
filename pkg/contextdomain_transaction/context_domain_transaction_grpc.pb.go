// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: context_domain_transaction.proto

package contextdomain_transaction

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContextDomainTransactionService_Create_FullMethodName  = "/contextdomain_transaction.ContextDomainTransactionService/Create"
	ContextDomainTransactionService_FindOne_FullMethodName = "/contextdomain_transaction.ContextDomainTransactionService/FindOne"
)

// ContextDomainTransactionServiceClient is the client API for ContextDomainTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContextDomainTransactionServiceClient interface {
	Create(ctx context.Context, opts ...grpc.CallOption) (ContextDomainTransactionService_CreateClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ContextDomainTransactionResponse, error)
}

type contextDomainTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContextDomainTransactionServiceClient(cc grpc.ClientConnInterface) ContextDomainTransactionServiceClient {
	return &contextDomainTransactionServiceClient{cc}
}

func (c *contextDomainTransactionServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (ContextDomainTransactionService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContextDomainTransactionService_ServiceDesc.Streams[0], ContextDomainTransactionService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contextDomainTransactionServiceCreateClient{stream}
	return x, nil
}

type ContextDomainTransactionService_CreateClient interface {
	Send(*ContextDomainTransactionRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type contextDomainTransactionServiceCreateClient struct {
	grpc.ClientStream
}

func (x *contextDomainTransactionServiceCreateClient) Send(m *ContextDomainTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contextDomainTransactionServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contextDomainTransactionServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ContextDomainTransactionResponse, error) {
	out := new(ContextDomainTransactionResponse)
	err := c.cc.Invoke(ctx, ContextDomainTransactionService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextDomainTransactionServiceServer is the server API for ContextDomainTransactionService service.
// All implementations must embed UnimplementedContextDomainTransactionServiceServer
// for forward compatibility
type ContextDomainTransactionServiceServer interface {
	Create(ContextDomainTransactionService_CreateServer) error
	FindOne(context.Context, *input.UUIDRequest) (*ContextDomainTransactionResponse, error)
	mustEmbedUnimplementedContextDomainTransactionServiceServer()
}

// UnimplementedContextDomainTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContextDomainTransactionServiceServer struct {
}

func (UnimplementedContextDomainTransactionServiceServer) Create(ContextDomainTransactionService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContextDomainTransactionServiceServer) FindOne(context.Context, *input.UUIDRequest) (*ContextDomainTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedContextDomainTransactionServiceServer) mustEmbedUnimplementedContextDomainTransactionServiceServer() {
}

// UnsafeContextDomainTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContextDomainTransactionServiceServer will
// result in compilation errors.
type UnsafeContextDomainTransactionServiceServer interface {
	mustEmbedUnimplementedContextDomainTransactionServiceServer()
}

func RegisterContextDomainTransactionServiceServer(s grpc.ServiceRegistrar, srv ContextDomainTransactionServiceServer) {
	s.RegisterService(&ContextDomainTransactionService_ServiceDesc, srv)
}

func _ContextDomainTransactionService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContextDomainTransactionServiceServer).Create(&contextDomainTransactionServiceCreateServer{stream})
}

type ContextDomainTransactionService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*ContextDomainTransactionRequest, error)
	grpc.ServerStream
}

type contextDomainTransactionServiceCreateServer struct {
	grpc.ServerStream
}

func (x *contextDomainTransactionServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contextDomainTransactionServiceCreateServer) Recv() (*ContextDomainTransactionRequest, error) {
	m := new(ContextDomainTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContextDomainTransactionService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextDomainTransactionServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextDomainTransactionService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextDomainTransactionServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContextDomainTransactionService_ServiceDesc is the grpc.ServiceDesc for ContextDomainTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContextDomainTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contextdomain_transaction.ContextDomainTransactionService",
	HandlerType: (*ContextDomainTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOne",
			Handler:    _ContextDomainTransactionService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _ContextDomainTransactionService_Create_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "context_domain_transaction.proto",
}
