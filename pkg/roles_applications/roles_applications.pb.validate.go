// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: roles_applications.proto

package roles_applications

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = output.StatusResponse(0)
)

// define the regex for a UUID once up-front
var _roles_applications_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RolesApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RolesApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolesApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RolesApplicationsRequestMultiError, or nil if none found.
func (m *RolesApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RolesApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIdRole()); err != nil {
		err = RolesApplicationsRequestValidationError{
			field:  "IdRole",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdApplication()); err != nil {
		err = RolesApplicationsRequestValidationError{
			field:  "IdApplication",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RolesApplicationsRequestMultiError(errors)
	}

	return nil
}

func (m *RolesApplicationsRequest) _validateUuid(uuid string) error {
	if matched := _roles_applications_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RolesApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by RolesApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type RolesApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolesApplicationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolesApplicationsRequestMultiError) AllErrors() []error { return m }

// RolesApplicationsRequestValidationError is the validation error returned by
// RolesApplicationsRequest.Validate if the designated constraints aren't met.
type RolesApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolesApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolesApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolesApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolesApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolesApplicationsRequestValidationError) ErrorName() string {
	return "RolesApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RolesApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolesApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolesApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolesApplicationsRequestValidationError{}

// Validate checks the field values on RolesApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RolesApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolesApplicationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RolesApplicationsResponseMultiError, or nil if none found.
func (m *RolesApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RolesApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIdRole()); err != nil {
		err = RolesApplicationsResponseValidationError{
			field:  "IdRole",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdApplication()); err != nil {
		err = RolesApplicationsResponseValidationError{
			field:  "IdApplication",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdAuditable()); err != nil {
		err = RolesApplicationsResponseValidationError{
			field:  "IdAuditable",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RolesApplicationsResponseValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RolesApplicationsResponseMultiError(errors)
	}

	return nil
}

func (m *RolesApplicationsResponse) _validateUuid(uuid string) error {
	if matched := _roles_applications_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RolesApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by RolesApplicationsResponse.ValidateAll() if the
// designated constraints aren't met.
type RolesApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolesApplicationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolesApplicationsResponseMultiError) AllErrors() []error { return m }

// RolesApplicationsResponseValidationError is the validation error returned by
// RolesApplicationsResponse.Validate if the designated constraints aren't met.
type RolesApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolesApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolesApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolesApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolesApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolesApplicationsResponseValidationError) ErrorName() string {
	return "RolesApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RolesApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolesApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolesApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolesApplicationsResponseValidationError{}
