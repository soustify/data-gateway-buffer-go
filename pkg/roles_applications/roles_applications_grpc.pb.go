// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: roles_applications.proto

package roles_applications

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RolesApplicationsService_Paginate_FullMethodName = "/soustify.datagateway.roles_applications.RolesApplicationsService/Paginate"
	RolesApplicationsService_Count_FullMethodName    = "/soustify.datagateway.roles_applications.RolesApplicationsService/Count"
	RolesApplicationsService_Create_FullMethodName   = "/soustify.datagateway.roles_applications.RolesApplicationsService/Create"
	RolesApplicationsService_Update_FullMethodName   = "/soustify.datagateway.roles_applications.RolesApplicationsService/Update"
	RolesApplicationsService_Inactive_FullMethodName = "/soustify.datagateway.roles_applications.RolesApplicationsService/Inactive"
	RolesApplicationsService_Active_FullMethodName   = "/soustify.datagateway.roles_applications.RolesApplicationsService/Active"
	RolesApplicationsService_FindOne_FullMethodName  = "/soustify.datagateway.roles_applications.RolesApplicationsService/FindOne"
	RolesApplicationsService_Delete_FullMethodName   = "/soustify.datagateway.roles_applications.RolesApplicationsService/Delete"
)

// RolesApplicationsServiceClient is the client API for RolesApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolesApplicationsServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (RolesApplicationsService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*RolesApplicationsResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_DeleteClient, error)
}

type rolesApplicationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolesApplicationsServiceClient(cc grpc.ClientConnInterface) RolesApplicationsServiceClient {
	return &rolesApplicationsServiceClient{cc}
}

func (c *rolesApplicationsServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (RolesApplicationsService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesApplicationsService_ServiceDesc.Streams[0], RolesApplicationsService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesApplicationsServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolesApplicationsService_PaginateClient interface {
	Recv() (*RolesApplicationsResponse, error)
	grpc.ClientStream
}

type rolesApplicationsServicePaginateClient struct {
	grpc.ClientStream
}

func (x *rolesApplicationsServicePaginateClient) Recv() (*RolesApplicationsResponse, error) {
	m := new(RolesApplicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesApplicationsServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, RolesApplicationsService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesApplicationsServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesApplicationsService_ServiceDesc.Streams[1], RolesApplicationsService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesApplicationsServiceCreateClient{stream}
	return x, nil
}

type RolesApplicationsService_CreateClient interface {
	Send(*RolesApplicationsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesApplicationsServiceCreateClient struct {
	grpc.ClientStream
}

func (x *rolesApplicationsServiceCreateClient) Send(m *RolesApplicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesApplicationsServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesApplicationsServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesApplicationsService_ServiceDesc.Streams[2], RolesApplicationsService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesApplicationsServiceUpdateClient{stream}
	return x, nil
}

type RolesApplicationsService_UpdateClient interface {
	Send(*RolesApplicationsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesApplicationsServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *rolesApplicationsServiceUpdateClient) Send(m *RolesApplicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesApplicationsServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesApplicationsServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesApplicationsService_ServiceDesc.Streams[3], RolesApplicationsService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesApplicationsServiceInactiveClient{stream}
	return x, nil
}

type RolesApplicationsService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type rolesApplicationsServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *rolesApplicationsServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesApplicationsServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesApplicationsServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesApplicationsService_ServiceDesc.Streams[4], RolesApplicationsService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesApplicationsServiceActiveClient{stream}
	return x, nil
}

type RolesApplicationsService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type rolesApplicationsServiceActiveClient struct {
	grpc.ClientStream
}

func (x *rolesApplicationsServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesApplicationsServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesApplicationsServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*RolesApplicationsResponse, error) {
	out := new(RolesApplicationsResponse)
	err := c.cc.Invoke(ctx, RolesApplicationsService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesApplicationsServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (RolesApplicationsService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesApplicationsService_ServiceDesc.Streams[5], RolesApplicationsService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesApplicationsServiceDeleteClient{stream}
	return x, nil
}

type RolesApplicationsService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesApplicationsServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *rolesApplicationsServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesApplicationsServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RolesApplicationsServiceServer is the server API for RolesApplicationsService service.
// All implementations must embed UnimplementedRolesApplicationsServiceServer
// for forward compatibility
type RolesApplicationsServiceServer interface {
	Paginate(*input.PaginationRequest, RolesApplicationsService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(RolesApplicationsService_CreateServer) error
	Update(RolesApplicationsService_UpdateServer) error
	Inactive(RolesApplicationsService_InactiveServer) error
	Active(RolesApplicationsService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*RolesApplicationsResponse, error)
	Delete(RolesApplicationsService_DeleteServer) error
	mustEmbedUnimplementedRolesApplicationsServiceServer()
}

// UnimplementedRolesApplicationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolesApplicationsServiceServer struct {
}

func (UnimplementedRolesApplicationsServiceServer) Paginate(*input.PaginationRequest, RolesApplicationsService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) Create(RolesApplicationsService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) Update(RolesApplicationsService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) Inactive(RolesApplicationsService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) Active(RolesApplicationsService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) FindOne(context.Context, *input.UUIDRequest) (*RolesApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) Delete(RolesApplicationsService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRolesApplicationsServiceServer) mustEmbedUnimplementedRolesApplicationsServiceServer() {
}

// UnsafeRolesApplicationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolesApplicationsServiceServer will
// result in compilation errors.
type UnsafeRolesApplicationsServiceServer interface {
	mustEmbedUnimplementedRolesApplicationsServiceServer()
}

func RegisterRolesApplicationsServiceServer(s grpc.ServiceRegistrar, srv RolesApplicationsServiceServer) {
	s.RegisterService(&RolesApplicationsService_ServiceDesc, srv)
}

func _RolesApplicationsService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolesApplicationsServiceServer).Paginate(m, &rolesApplicationsServicePaginateServer{stream})
}

type RolesApplicationsService_PaginateServer interface {
	Send(*RolesApplicationsResponse) error
	grpc.ServerStream
}

type rolesApplicationsServicePaginateServer struct {
	grpc.ServerStream
}

func (x *rolesApplicationsServicePaginateServer) Send(m *RolesApplicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RolesApplicationsService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesApplicationsServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesApplicationsService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesApplicationsServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesApplicationsService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesApplicationsServiceServer).Create(&rolesApplicationsServiceCreateServer{stream})
}

type RolesApplicationsService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*RolesApplicationsRequest, error)
	grpc.ServerStream
}

type rolesApplicationsServiceCreateServer struct {
	grpc.ServerStream
}

func (x *rolesApplicationsServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesApplicationsServiceCreateServer) Recv() (*RolesApplicationsRequest, error) {
	m := new(RolesApplicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesApplicationsService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesApplicationsServiceServer).Update(&rolesApplicationsServiceUpdateServer{stream})
}

type RolesApplicationsService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*RolesApplicationsRequest, error)
	grpc.ServerStream
}

type rolesApplicationsServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *rolesApplicationsServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesApplicationsServiceUpdateServer) Recv() (*RolesApplicationsRequest, error) {
	m := new(RolesApplicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesApplicationsService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesApplicationsServiceServer).Inactive(&rolesApplicationsServiceInactiveServer{stream})
}

type RolesApplicationsService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesApplicationsServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *rolesApplicationsServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesApplicationsServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesApplicationsService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesApplicationsServiceServer).Active(&rolesApplicationsServiceActiveServer{stream})
}

type RolesApplicationsService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesApplicationsServiceActiveServer struct {
	grpc.ServerStream
}

func (x *rolesApplicationsServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesApplicationsServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesApplicationsService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesApplicationsServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesApplicationsService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesApplicationsServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesApplicationsService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesApplicationsServiceServer).Delete(&rolesApplicationsServiceDeleteServer{stream})
}

type RolesApplicationsService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesApplicationsServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *rolesApplicationsServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesApplicationsServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RolesApplicationsService_ServiceDesc is the grpc.ServiceDesc for RolesApplicationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolesApplicationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.roles_applications.RolesApplicationsService",
	HandlerType: (*RolesApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _RolesApplicationsService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _RolesApplicationsService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _RolesApplicationsService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _RolesApplicationsService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _RolesApplicationsService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _RolesApplicationsService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _RolesApplicationsService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _RolesApplicationsService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "roles_applications.proto",
}
