// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: policies.proto

package policies

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PoliciesService_Paginate_FullMethodName = "/soustify.datagateway.policies.PoliciesService/Paginate"
	PoliciesService_Count_FullMethodName    = "/soustify.datagateway.policies.PoliciesService/Count"
	PoliciesService_Create_FullMethodName   = "/soustify.datagateway.policies.PoliciesService/Create"
	PoliciesService_Update_FullMethodName   = "/soustify.datagateway.policies.PoliciesService/Update"
	PoliciesService_Inactive_FullMethodName = "/soustify.datagateway.policies.PoliciesService/Inactive"
	PoliciesService_Active_FullMethodName   = "/soustify.datagateway.policies.PoliciesService/Active"
	PoliciesService_FindOne_FullMethodName  = "/soustify.datagateway.policies.PoliciesService/FindOne"
	PoliciesService_Delete_FullMethodName   = "/soustify.datagateway.policies.PoliciesService/Delete"
)

// PoliciesServiceClient is the client API for PoliciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoliciesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PoliciesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PoliciesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_DeleteClient, error)
}

type policiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliciesServiceClient(cc grpc.ClientConnInterface) PoliciesServiceClient {
	return &policiesServiceClient{cc}
}

func (c *policiesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PoliciesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[0], PoliciesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PoliciesService_PaginateClient interface {
	Recv() (*PoliciesResponse, error)
	grpc.ClientStream
}

type policiesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *policiesServicePaginateClient) Recv() (*PoliciesResponse, error) {
	m := new(PoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policiesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, PoliciesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[1], PoliciesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServiceCreateClient{stream}
	return x, nil
}

type PoliciesService_CreateClient interface {
	Send(*PoliciesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type policiesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *policiesServiceCreateClient) Send(m *PoliciesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policiesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policiesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[2], PoliciesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServiceUpdateClient{stream}
	return x, nil
}

type PoliciesService_UpdateClient interface {
	Send(*PoliciesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type policiesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *policiesServiceUpdateClient) Send(m *PoliciesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policiesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policiesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[3], PoliciesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServiceInactiveClient{stream}
	return x, nil
}

type PoliciesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type policiesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *policiesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policiesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policiesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[4], PoliciesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServiceActiveClient{stream}
	return x, nil
}

type PoliciesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type policiesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *policiesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policiesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policiesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PoliciesResponse, error) {
	out := new(PoliciesResponse)
	err := c.cc.Invoke(ctx, PoliciesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (PoliciesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[5], PoliciesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServiceDeleteClient{stream}
	return x, nil
}

type PoliciesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type policiesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *policiesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policiesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PoliciesServiceServer is the server API for PoliciesService service.
// All implementations must embed UnimplementedPoliciesServiceServer
// for forward compatibility
type PoliciesServiceServer interface {
	Paginate(*input.PaginationRequest, PoliciesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(PoliciesService_CreateServer) error
	Update(PoliciesService_UpdateServer) error
	Inactive(PoliciesService_InactiveServer) error
	Active(PoliciesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*PoliciesResponse, error)
	Delete(PoliciesService_DeleteServer) error
	mustEmbedUnimplementedPoliciesServiceServer()
}

// UnimplementedPoliciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPoliciesServiceServer struct {
}

func (UnimplementedPoliciesServiceServer) Paginate(*input.PaginationRequest, PoliciesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedPoliciesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPoliciesServiceServer) Create(PoliciesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPoliciesServiceServer) Update(PoliciesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPoliciesServiceServer) Inactive(PoliciesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedPoliciesServiceServer) Active(PoliciesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedPoliciesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*PoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPoliciesServiceServer) Delete(PoliciesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPoliciesServiceServer) mustEmbedUnimplementedPoliciesServiceServer() {}

// UnsafePoliciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoliciesServiceServer will
// result in compilation errors.
type UnsafePoliciesServiceServer interface {
	mustEmbedUnimplementedPoliciesServiceServer()
}

func RegisterPoliciesServiceServer(s grpc.ServiceRegistrar, srv PoliciesServiceServer) {
	s.RegisterService(&PoliciesService_ServiceDesc, srv)
}

func _PoliciesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PoliciesServiceServer).Paginate(m, &policiesServicePaginateServer{stream})
}

type PoliciesService_PaginateServer interface {
	Send(*PoliciesResponse) error
	grpc.ServerStream
}

type policiesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *policiesServicePaginateServer) Send(m *PoliciesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PoliciesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoliciesServiceServer).Create(&policiesServiceCreateServer{stream})
}

type PoliciesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PoliciesRequest, error)
	grpc.ServerStream
}

type policiesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *policiesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policiesServiceCreateServer) Recv() (*PoliciesRequest, error) {
	m := new(PoliciesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PoliciesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoliciesServiceServer).Update(&policiesServiceUpdateServer{stream})
}

type PoliciesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PoliciesRequest, error)
	grpc.ServerStream
}

type policiesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *policiesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policiesServiceUpdateServer) Recv() (*PoliciesRequest, error) {
	m := new(PoliciesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PoliciesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoliciesServiceServer).Inactive(&policiesServiceInactiveServer{stream})
}

type PoliciesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type policiesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *policiesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policiesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PoliciesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoliciesServiceServer).Active(&policiesServiceActiveServer{stream})
}

type PoliciesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type policiesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *policiesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policiesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PoliciesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoliciesServiceServer).Delete(&policiesServiceDeleteServer{stream})
}

type PoliciesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type policiesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *policiesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policiesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PoliciesService_ServiceDesc is the grpc.ServiceDesc for PoliciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoliciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.policies.PoliciesService",
	HandlerType: (*PoliciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _PoliciesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PoliciesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _PoliciesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _PoliciesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _PoliciesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _PoliciesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _PoliciesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _PoliciesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "policies.proto",
}
