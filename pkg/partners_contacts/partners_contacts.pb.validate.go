// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: partners_contacts.proto

package partners_contacts

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = output.StatusResponse(0)
)

// define the regex for a UUID once up-front
var _partners_contacts_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PartnersContactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartnersContactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartnersContactsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartnersContactsRequestMultiError, or nil if none found.
func (m *PartnersContactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PartnersContactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIdPartner()); err != nil {
		err = PartnersContactsRequestValidationError{
			field:  "IdPartner",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdContact()); err != nil {
		err = PartnersContactsRequestValidationError{
			field:  "IdContact",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PartnersContactsRequestMultiError(errors)
	}

	return nil
}

func (m *PartnersContactsRequest) _validateUuid(uuid string) error {
	if matched := _partners_contacts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PartnersContactsRequestMultiError is an error wrapping multiple validation
// errors returned by PartnersContactsRequest.ValidateAll() if the designated
// constraints aren't met.
type PartnersContactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnersContactsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnersContactsRequestMultiError) AllErrors() []error { return m }

// PartnersContactsRequestValidationError is the validation error returned by
// PartnersContactsRequest.Validate if the designated constraints aren't met.
type PartnersContactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnersContactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnersContactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnersContactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnersContactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnersContactsRequestValidationError) ErrorName() string {
	return "PartnersContactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PartnersContactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartnersContactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnersContactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnersContactsRequestValidationError{}

// Validate checks the field values on PartnersContactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PartnersContactsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartnersContactsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PartnersContactsResponseMultiError, or nil if none found.
func (m *PartnersContactsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PartnersContactsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIdPartner()); err != nil {
		err = PartnersContactsResponseValidationError{
			field:  "IdPartner",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdContact()); err != nil {
		err = PartnersContactsResponseValidationError{
			field:  "IdContact",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		err = PartnersContactsResponseValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return PartnersContactsResponseMultiError(errors)
	}

	return nil
}

func (m *PartnersContactsResponse) _validateUuid(uuid string) error {
	if matched := _partners_contacts_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PartnersContactsResponseMultiError is an error wrapping multiple validation
// errors returned by PartnersContactsResponse.ValidateAll() if the designated
// constraints aren't met.
type PartnersContactsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartnersContactsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartnersContactsResponseMultiError) AllErrors() []error { return m }

// PartnersContactsResponseValidationError is the validation error returned by
// PartnersContactsResponse.Validate if the designated constraints aren't met.
type PartnersContactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartnersContactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartnersContactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartnersContactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartnersContactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartnersContactsResponseValidationError) ErrorName() string {
	return "PartnersContactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PartnersContactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartnersContactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartnersContactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartnersContactsResponseValidationError{}
