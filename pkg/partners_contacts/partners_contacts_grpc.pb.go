// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: partners_contacts.proto

package partners_contacts

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnersContactsService_Paginate_FullMethodName = "/soustify.datagateway.partners_contacts.PartnersContactsService/Paginate"
	PartnersContactsService_Count_FullMethodName    = "/soustify.datagateway.partners_contacts.PartnersContactsService/Count"
	PartnersContactsService_Create_FullMethodName   = "/soustify.datagateway.partners_contacts.PartnersContactsService/Create"
	PartnersContactsService_Update_FullMethodName   = "/soustify.datagateway.partners_contacts.PartnersContactsService/Update"
	PartnersContactsService_Inactive_FullMethodName = "/soustify.datagateway.partners_contacts.PartnersContactsService/Inactive"
	PartnersContactsService_Active_FullMethodName   = "/soustify.datagateway.partners_contacts.PartnersContactsService/Active"
	PartnersContactsService_FindOne_FullMethodName  = "/soustify.datagateway.partners_contacts.PartnersContactsService/FindOne"
	PartnersContactsService_Delete_FullMethodName   = "/soustify.datagateway.partners_contacts.PartnersContactsService/Delete"
)

// PartnersContactsServiceClient is the client API for PartnersContactsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnersContactsServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersContactsService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersContactsResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_DeleteClient, error)
}

type partnersContactsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnersContactsServiceClient(cc grpc.ClientConnInterface) PartnersContactsServiceClient {
	return &partnersContactsServiceClient{cc}
}

func (c *partnersContactsServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersContactsService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersContactsService_ServiceDesc.Streams[0], PartnersContactsService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersContactsServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartnersContactsService_PaginateClient interface {
	Recv() (*PartnersContactsResponse, error)
	grpc.ClientStream
}

type partnersContactsServicePaginateClient struct {
	grpc.ClientStream
}

func (x *partnersContactsServicePaginateClient) Recv() (*PartnersContactsResponse, error) {
	m := new(PartnersContactsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersContactsServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, PartnersContactsService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersContactsServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersContactsService_ServiceDesc.Streams[1], PartnersContactsService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersContactsServiceCreateClient{stream}
	return x, nil
}

type PartnersContactsService_CreateClient interface {
	Send(*PartnersContactsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersContactsServiceCreateClient struct {
	grpc.ClientStream
}

func (x *partnersContactsServiceCreateClient) Send(m *PartnersContactsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersContactsServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersContactsServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersContactsService_ServiceDesc.Streams[2], PartnersContactsService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersContactsServiceUpdateClient{stream}
	return x, nil
}

type PartnersContactsService_UpdateClient interface {
	Send(*PartnersContactsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersContactsServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *partnersContactsServiceUpdateClient) Send(m *PartnersContactsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersContactsServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersContactsServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersContactsService_ServiceDesc.Streams[3], PartnersContactsService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersContactsServiceInactiveClient{stream}
	return x, nil
}

type PartnersContactsService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersContactsServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *partnersContactsServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersContactsServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersContactsServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersContactsService_ServiceDesc.Streams[4], PartnersContactsService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersContactsServiceActiveClient{stream}
	return x, nil
}

type PartnersContactsService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersContactsServiceActiveClient struct {
	grpc.ClientStream
}

func (x *partnersContactsServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersContactsServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersContactsServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersContactsResponse, error) {
	out := new(PartnersContactsResponse)
	err := c.cc.Invoke(ctx, PartnersContactsService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersContactsServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersContactsService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersContactsService_ServiceDesc.Streams[5], PartnersContactsService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersContactsServiceDeleteClient{stream}
	return x, nil
}

type PartnersContactsService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersContactsServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *partnersContactsServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersContactsServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersContactsServiceServer is the server API for PartnersContactsService service.
// All implementations must embed UnimplementedPartnersContactsServiceServer
// for forward compatibility
type PartnersContactsServiceServer interface {
	Paginate(*input.PaginationRequest, PartnersContactsService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(PartnersContactsService_CreateServer) error
	Update(PartnersContactsService_UpdateServer) error
	Inactive(PartnersContactsService_InactiveServer) error
	Active(PartnersContactsService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*PartnersContactsResponse, error)
	Delete(PartnersContactsService_DeleteServer) error
	mustEmbedUnimplementedPartnersContactsServiceServer()
}

// UnimplementedPartnersContactsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnersContactsServiceServer struct {
}

func (UnimplementedPartnersContactsServiceServer) Paginate(*input.PaginationRequest, PartnersContactsService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedPartnersContactsServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPartnersContactsServiceServer) Create(PartnersContactsService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPartnersContactsServiceServer) Update(PartnersContactsService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPartnersContactsServiceServer) Inactive(PartnersContactsService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedPartnersContactsServiceServer) Active(PartnersContactsService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedPartnersContactsServiceServer) FindOne(context.Context, *input.UUIDRequest) (*PartnersContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPartnersContactsServiceServer) Delete(PartnersContactsService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPartnersContactsServiceServer) mustEmbedUnimplementedPartnersContactsServiceServer() {
}

// UnsafePartnersContactsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnersContactsServiceServer will
// result in compilation errors.
type UnsafePartnersContactsServiceServer interface {
	mustEmbedUnimplementedPartnersContactsServiceServer()
}

func RegisterPartnersContactsServiceServer(s grpc.ServiceRegistrar, srv PartnersContactsServiceServer) {
	s.RegisterService(&PartnersContactsService_ServiceDesc, srv)
}

func _PartnersContactsService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartnersContactsServiceServer).Paginate(m, &partnersContactsServicePaginateServer{stream})
}

type PartnersContactsService_PaginateServer interface {
	Send(*PartnersContactsResponse) error
	grpc.ServerStream
}

type partnersContactsServicePaginateServer struct {
	grpc.ServerStream
}

func (x *partnersContactsServicePaginateServer) Send(m *PartnersContactsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PartnersContactsService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersContactsServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersContactsService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersContactsServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersContactsService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersContactsServiceServer).Create(&partnersContactsServiceCreateServer{stream})
}

type PartnersContactsService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersContactsRequest, error)
	grpc.ServerStream
}

type partnersContactsServiceCreateServer struct {
	grpc.ServerStream
}

func (x *partnersContactsServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersContactsServiceCreateServer) Recv() (*PartnersContactsRequest, error) {
	m := new(PartnersContactsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersContactsService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersContactsServiceServer).Update(&partnersContactsServiceUpdateServer{stream})
}

type PartnersContactsService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersContactsRequest, error)
	grpc.ServerStream
}

type partnersContactsServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *partnersContactsServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersContactsServiceUpdateServer) Recv() (*PartnersContactsRequest, error) {
	m := new(PartnersContactsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersContactsService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersContactsServiceServer).Inactive(&partnersContactsServiceInactiveServer{stream})
}

type PartnersContactsService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersContactsServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *partnersContactsServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersContactsServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersContactsService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersContactsServiceServer).Active(&partnersContactsServiceActiveServer{stream})
}

type PartnersContactsService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersContactsServiceActiveServer struct {
	grpc.ServerStream
}

func (x *partnersContactsServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersContactsServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersContactsService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersContactsServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersContactsService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersContactsServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersContactsService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersContactsServiceServer).Delete(&partnersContactsServiceDeleteServer{stream})
}

type PartnersContactsService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersContactsServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *partnersContactsServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersContactsServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersContactsService_ServiceDesc is the grpc.ServiceDesc for PartnersContactsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnersContactsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.partners_contacts.PartnersContactsService",
	HandlerType: (*PartnersContactsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _PartnersContactsService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PartnersContactsService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _PartnersContactsService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _PartnersContactsService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _PartnersContactsService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _PartnersContactsService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _PartnersContactsService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _PartnersContactsService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "partners_contacts.proto",
}
