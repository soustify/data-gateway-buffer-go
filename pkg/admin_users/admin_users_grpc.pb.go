// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: admin_users.proto

package admin_users

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminUsersService_Paginate_FullMethodName = "/soustify.datagateway.admin_users.AdminUsersService/Paginate"
	AdminUsersService_Count_FullMethodName    = "/soustify.datagateway.admin_users.AdminUsersService/Count"
	AdminUsersService_Create_FullMethodName   = "/soustify.datagateway.admin_users.AdminUsersService/Create"
	AdminUsersService_Update_FullMethodName   = "/soustify.datagateway.admin_users.AdminUsersService/Update"
	AdminUsersService_Inactive_FullMethodName = "/soustify.datagateway.admin_users.AdminUsersService/Inactive"
	AdminUsersService_Active_FullMethodName   = "/soustify.datagateway.admin_users.AdminUsersService/Active"
	AdminUsersService_FindOne_FullMethodName  = "/soustify.datagateway.admin_users.AdminUsersService/FindOne"
	AdminUsersService_Delete_FullMethodName   = "/soustify.datagateway.admin_users.AdminUsersService/Delete"
)

// AdminUsersServiceClient is the client API for AdminUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminUsersServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (AdminUsersService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*AdminUsersResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_DeleteClient, error)
}

type adminUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminUsersServiceClient(cc grpc.ClientConnInterface) AdminUsersServiceClient {
	return &adminUsersServiceClient{cc}
}

func (c *adminUsersServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (AdminUsersService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminUsersService_ServiceDesc.Streams[0], AdminUsersService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminUsersServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminUsersService_PaginateClient interface {
	Recv() (*AdminUsersResponse, error)
	grpc.ClientStream
}

type adminUsersServicePaginateClient struct {
	grpc.ClientStream
}

func (x *adminUsersServicePaginateClient) Recv() (*AdminUsersResponse, error) {
	m := new(AdminUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminUsersServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminUsersService_ServiceDesc.Streams[1], AdminUsersService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminUsersServiceCreateClient{stream}
	return x, nil
}

type AdminUsersService_CreateClient interface {
	Send(*AdminUsersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type adminUsersServiceCreateClient struct {
	grpc.ClientStream
}

func (x *adminUsersServiceCreateClient) Send(m *AdminUsersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminUsersServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminUsersServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminUsersService_ServiceDesc.Streams[2], AdminUsersService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminUsersServiceUpdateClient{stream}
	return x, nil
}

type AdminUsersService_UpdateClient interface {
	Send(*AdminUsersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type adminUsersServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *adminUsersServiceUpdateClient) Send(m *AdminUsersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminUsersServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminUsersServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminUsersService_ServiceDesc.Streams[3], AdminUsersService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminUsersServiceInactiveClient{stream}
	return x, nil
}

type AdminUsersService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type adminUsersServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *adminUsersServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminUsersServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminUsersServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminUsersService_ServiceDesc.Streams[4], AdminUsersService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminUsersServiceActiveClient{stream}
	return x, nil
}

type AdminUsersService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type adminUsersServiceActiveClient struct {
	grpc.ClientStream
}

func (x *adminUsersServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminUsersServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminUsersServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*AdminUsersResponse, error) {
	out := new(AdminUsersResponse)
	err := c.cc.Invoke(ctx, AdminUsersService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminUsersServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (AdminUsersService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminUsersService_ServiceDesc.Streams[5], AdminUsersService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminUsersServiceDeleteClient{stream}
	return x, nil
}

type AdminUsersService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type adminUsersServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *adminUsersServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminUsersServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminUsersServiceServer is the server API for AdminUsersService service.
// All implementations must embed UnimplementedAdminUsersServiceServer
// for forward compatibility
type AdminUsersServiceServer interface {
	Paginate(*input.PaginationRequest, AdminUsersService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(AdminUsersService_CreateServer) error
	Update(AdminUsersService_UpdateServer) error
	Inactive(AdminUsersService_InactiveServer) error
	Active(AdminUsersService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*AdminUsersResponse, error)
	Delete(AdminUsersService_DeleteServer) error
	mustEmbedUnimplementedAdminUsersServiceServer()
}

// UnimplementedAdminUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminUsersServiceServer struct {
}

func (UnimplementedAdminUsersServiceServer) Paginate(*input.PaginationRequest, AdminUsersService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedAdminUsersServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedAdminUsersServiceServer) Create(AdminUsersService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminUsersServiceServer) Update(AdminUsersService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminUsersServiceServer) Inactive(AdminUsersService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedAdminUsersServiceServer) Active(AdminUsersService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedAdminUsersServiceServer) FindOne(context.Context, *input.UUIDRequest) (*AdminUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedAdminUsersServiceServer) Delete(AdminUsersService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminUsersServiceServer) mustEmbedUnimplementedAdminUsersServiceServer() {}

// UnsafeAdminUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminUsersServiceServer will
// result in compilation errors.
type UnsafeAdminUsersServiceServer interface {
	mustEmbedUnimplementedAdminUsersServiceServer()
}

func RegisterAdminUsersServiceServer(s grpc.ServiceRegistrar, srv AdminUsersServiceServer) {
	s.RegisterService(&AdminUsersService_ServiceDesc, srv)
}

func _AdminUsersService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminUsersServiceServer).Paginate(m, &adminUsersServicePaginateServer{stream})
}

type AdminUsersService_PaginateServer interface {
	Send(*AdminUsersResponse) error
	grpc.ServerStream
}

type adminUsersServicePaginateServer struct {
	grpc.ServerStream
}

func (x *adminUsersServicePaginateServer) Send(m *AdminUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminUsersService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminUsersServiceServer).Create(&adminUsersServiceCreateServer{stream})
}

type AdminUsersService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*AdminUsersRequest, error)
	grpc.ServerStream
}

type adminUsersServiceCreateServer struct {
	grpc.ServerStream
}

func (x *adminUsersServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminUsersServiceCreateServer) Recv() (*AdminUsersRequest, error) {
	m := new(AdminUsersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdminUsersService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminUsersServiceServer).Update(&adminUsersServiceUpdateServer{stream})
}

type AdminUsersService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*AdminUsersRequest, error)
	grpc.ServerStream
}

type adminUsersServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *adminUsersServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminUsersServiceUpdateServer) Recv() (*AdminUsersRequest, error) {
	m := new(AdminUsersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdminUsersService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminUsersServiceServer).Inactive(&adminUsersServiceInactiveServer{stream})
}

type AdminUsersService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type adminUsersServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *adminUsersServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminUsersServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdminUsersService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminUsersServiceServer).Active(&adminUsersServiceActiveServer{stream})
}

type AdminUsersService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type adminUsersServiceActiveServer struct {
	grpc.ServerStream
}

func (x *adminUsersServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminUsersServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdminUsersService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUsersServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUsersService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUsersServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminUsersService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminUsersServiceServer).Delete(&adminUsersServiceDeleteServer{stream})
}

type AdminUsersService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type adminUsersServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *adminUsersServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminUsersServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminUsersService_ServiceDesc is the grpc.ServiceDesc for AdminUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.admin_users.AdminUsersService",
	HandlerType: (*AdminUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _AdminUsersService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _AdminUsersService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _AdminUsersService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _AdminUsersService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _AdminUsersService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _AdminUsersService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _AdminUsersService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _AdminUsersService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "admin_users.proto",
}
