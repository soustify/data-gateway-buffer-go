// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: partners_addresses.proto

package partners_addresses

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnersAddressesService_Paginate_FullMethodName = "/partners_addresses.PartnersAddressesService/Paginate"
	PartnersAddressesService_Count_FullMethodName    = "/partners_addresses.PartnersAddressesService/Count"
	PartnersAddressesService_Create_FullMethodName   = "/partners_addresses.PartnersAddressesService/Create"
	PartnersAddressesService_Update_FullMethodName   = "/partners_addresses.PartnersAddressesService/Update"
	PartnersAddressesService_Inactive_FullMethodName = "/partners_addresses.PartnersAddressesService/Inactive"
	PartnersAddressesService_Active_FullMethodName   = "/partners_addresses.PartnersAddressesService/Active"
	PartnersAddressesService_FindOne_FullMethodName  = "/partners_addresses.PartnersAddressesService/FindOne"
	PartnersAddressesService_Delete_FullMethodName   = "/partners_addresses.PartnersAddressesService/Delete"
)

// PartnersAddressesServiceClient is the client API for PartnersAddressesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnersAddressesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersAddressesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersAddressesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_DeleteClient, error)
}

type partnersAddressesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnersAddressesServiceClient(cc grpc.ClientConnInterface) PartnersAddressesServiceClient {
	return &partnersAddressesServiceClient{cc}
}

func (c *partnersAddressesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersAddressesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersAddressesService_ServiceDesc.Streams[0], PartnersAddressesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersAddressesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartnersAddressesService_PaginateClient interface {
	Recv() (*PartnersAddressesResponse, error)
	grpc.ClientStream
}

type partnersAddressesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *partnersAddressesServicePaginateClient) Recv() (*PartnersAddressesResponse, error) {
	m := new(PartnersAddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersAddressesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, PartnersAddressesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersAddressesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersAddressesService_ServiceDesc.Streams[1], PartnersAddressesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersAddressesServiceCreateClient{stream}
	return x, nil
}

type PartnersAddressesService_CreateClient interface {
	Send(*PartnersAddressesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersAddressesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *partnersAddressesServiceCreateClient) Send(m *PartnersAddressesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersAddressesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersAddressesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersAddressesService_ServiceDesc.Streams[2], PartnersAddressesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersAddressesServiceUpdateClient{stream}
	return x, nil
}

type PartnersAddressesService_UpdateClient interface {
	Send(*PartnersAddressesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersAddressesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *partnersAddressesServiceUpdateClient) Send(m *PartnersAddressesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersAddressesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersAddressesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersAddressesService_ServiceDesc.Streams[3], PartnersAddressesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersAddressesServiceInactiveClient{stream}
	return x, nil
}

type PartnersAddressesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersAddressesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *partnersAddressesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersAddressesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersAddressesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersAddressesService_ServiceDesc.Streams[4], PartnersAddressesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersAddressesServiceActiveClient{stream}
	return x, nil
}

type PartnersAddressesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersAddressesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *partnersAddressesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersAddressesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersAddressesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersAddressesResponse, error) {
	out := new(PartnersAddressesResponse)
	err := c.cc.Invoke(ctx, PartnersAddressesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersAddressesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersAddressesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersAddressesService_ServiceDesc.Streams[5], PartnersAddressesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersAddressesServiceDeleteClient{stream}
	return x, nil
}

type PartnersAddressesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersAddressesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *partnersAddressesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersAddressesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersAddressesServiceServer is the server API for PartnersAddressesService service.
// All implementations must embed UnimplementedPartnersAddressesServiceServer
// for forward compatibility
type PartnersAddressesServiceServer interface {
	Paginate(*input.PaginationRequest, PartnersAddressesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(PartnersAddressesService_CreateServer) error
	Update(PartnersAddressesService_UpdateServer) error
	Inactive(PartnersAddressesService_InactiveServer) error
	Active(PartnersAddressesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*PartnersAddressesResponse, error)
	Delete(PartnersAddressesService_DeleteServer) error
	mustEmbedUnimplementedPartnersAddressesServiceServer()
}

// UnimplementedPartnersAddressesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnersAddressesServiceServer struct {
}

func (UnimplementedPartnersAddressesServiceServer) Paginate(*input.PaginationRequest, PartnersAddressesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) Create(PartnersAddressesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) Update(PartnersAddressesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) Inactive(PartnersAddressesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) Active(PartnersAddressesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*PartnersAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) Delete(PartnersAddressesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPartnersAddressesServiceServer) mustEmbedUnimplementedPartnersAddressesServiceServer() {
}

// UnsafePartnersAddressesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnersAddressesServiceServer will
// result in compilation errors.
type UnsafePartnersAddressesServiceServer interface {
	mustEmbedUnimplementedPartnersAddressesServiceServer()
}

func RegisterPartnersAddressesServiceServer(s grpc.ServiceRegistrar, srv PartnersAddressesServiceServer) {
	s.RegisterService(&PartnersAddressesService_ServiceDesc, srv)
}

func _PartnersAddressesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartnersAddressesServiceServer).Paginate(m, &partnersAddressesServicePaginateServer{stream})
}

type PartnersAddressesService_PaginateServer interface {
	Send(*PartnersAddressesResponse) error
	grpc.ServerStream
}

type partnersAddressesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *partnersAddressesServicePaginateServer) Send(m *PartnersAddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PartnersAddressesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersAddressesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersAddressesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersAddressesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersAddressesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersAddressesServiceServer).Create(&partnersAddressesServiceCreateServer{stream})
}

type PartnersAddressesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersAddressesRequest, error)
	grpc.ServerStream
}

type partnersAddressesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *partnersAddressesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersAddressesServiceCreateServer) Recv() (*PartnersAddressesRequest, error) {
	m := new(PartnersAddressesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersAddressesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersAddressesServiceServer).Update(&partnersAddressesServiceUpdateServer{stream})
}

type PartnersAddressesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersAddressesRequest, error)
	grpc.ServerStream
}

type partnersAddressesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *partnersAddressesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersAddressesServiceUpdateServer) Recv() (*PartnersAddressesRequest, error) {
	m := new(PartnersAddressesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersAddressesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersAddressesServiceServer).Inactive(&partnersAddressesServiceInactiveServer{stream})
}

type PartnersAddressesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersAddressesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *partnersAddressesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersAddressesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersAddressesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersAddressesServiceServer).Active(&partnersAddressesServiceActiveServer{stream})
}

type PartnersAddressesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersAddressesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *partnersAddressesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersAddressesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersAddressesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersAddressesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersAddressesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersAddressesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersAddressesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersAddressesServiceServer).Delete(&partnersAddressesServiceDeleteServer{stream})
}

type PartnersAddressesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersAddressesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *partnersAddressesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersAddressesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersAddressesService_ServiceDesc is the grpc.ServiceDesc for PartnersAddressesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnersAddressesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partners_addresses.PartnersAddressesService",
	HandlerType: (*PartnersAddressesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _PartnersAddressesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PartnersAddressesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _PartnersAddressesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _PartnersAddressesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _PartnersAddressesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _PartnersAddressesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _PartnersAddressesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _PartnersAddressesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "partners_addresses.proto",
}
