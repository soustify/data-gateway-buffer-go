// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: customers.proto

package customers

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomersService_Paginate_FullMethodName = "/customers.CustomersService/Paginate"
	CustomersService_Count_FullMethodName    = "/customers.CustomersService/Count"
	CustomersService_Create_FullMethodName   = "/customers.CustomersService/Create"
	CustomersService_Update_FullMethodName   = "/customers.CustomersService/Update"
	CustomersService_Inactive_FullMethodName = "/customers.CustomersService/Inactive"
	CustomersService_Active_FullMethodName   = "/customers.CustomersService/Active"
	CustomersService_FindOne_FullMethodName  = "/customers.CustomersService/FindOne"
	CustomersService_Delete_FullMethodName   = "/customers.CustomersService/Delete"
)

// CustomersServiceClient is the client API for CustomersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (CustomersService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (CustomersService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (CustomersService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (CustomersService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (CustomersService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*CustomersResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (CustomersService_DeleteClient, error)
}

type customersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersServiceClient(cc grpc.ClientConnInterface) CustomersServiceClient {
	return &customersServiceClient{cc}
}

func (c *customersServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (CustomersService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomersService_ServiceDesc.Streams[0], CustomersService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &customersServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomersService_PaginateClient interface {
	Recv() (*CustomersResponse, error)
	grpc.ClientStream
}

type customersServicePaginateClient struct {
	grpc.ClientStream
}

func (x *customersServicePaginateClient) Recv() (*CustomersResponse, error) {
	m := new(CustomersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customersServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, CustomersService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (CustomersService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomersService_ServiceDesc.Streams[1], CustomersService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &customersServiceCreateClient{stream}
	return x, nil
}

type CustomersService_CreateClient interface {
	Send(*CustomersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type customersServiceCreateClient struct {
	grpc.ClientStream
}

func (x *customersServiceCreateClient) Send(m *CustomersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customersServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customersServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (CustomersService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomersService_ServiceDesc.Streams[2], CustomersService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &customersServiceUpdateClient{stream}
	return x, nil
}

type CustomersService_UpdateClient interface {
	Send(*CustomersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type customersServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *customersServiceUpdateClient) Send(m *CustomersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customersServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customersServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (CustomersService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomersService_ServiceDesc.Streams[3], CustomersService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &customersServiceInactiveClient{stream}
	return x, nil
}

type CustomersService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type customersServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *customersServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customersServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customersServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (CustomersService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomersService_ServiceDesc.Streams[4], CustomersService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &customersServiceActiveClient{stream}
	return x, nil
}

type CustomersService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type customersServiceActiveClient struct {
	grpc.ClientStream
}

func (x *customersServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customersServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customersServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*CustomersResponse, error) {
	out := new(CustomersResponse)
	err := c.cc.Invoke(ctx, CustomersService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (CustomersService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomersService_ServiceDesc.Streams[5], CustomersService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &customersServiceDeleteClient{stream}
	return x, nil
}

type CustomersService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type customersServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *customersServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customersServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomersServiceServer is the server API for CustomersService service.
// All implementations must embed UnimplementedCustomersServiceServer
// for forward compatibility
type CustomersServiceServer interface {
	Paginate(*input.PaginationRequest, CustomersService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(CustomersService_CreateServer) error
	Update(CustomersService_UpdateServer) error
	Inactive(CustomersService_InactiveServer) error
	Active(CustomersService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*CustomersResponse, error)
	Delete(CustomersService_DeleteServer) error
	mustEmbedUnimplementedCustomersServiceServer()
}

// UnimplementedCustomersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersServiceServer struct {
}

func (UnimplementedCustomersServiceServer) Paginate(*input.PaginationRequest, CustomersService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedCustomersServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedCustomersServiceServer) Create(CustomersService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCustomersServiceServer) Update(CustomersService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCustomersServiceServer) Inactive(CustomersService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedCustomersServiceServer) Active(CustomersService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedCustomersServiceServer) FindOne(context.Context, *input.UUIDRequest) (*CustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedCustomersServiceServer) Delete(CustomersService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCustomersServiceServer) mustEmbedUnimplementedCustomersServiceServer() {}

// UnsafeCustomersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServiceServer will
// result in compilation errors.
type UnsafeCustomersServiceServer interface {
	mustEmbedUnimplementedCustomersServiceServer()
}

func RegisterCustomersServiceServer(s grpc.ServiceRegistrar, srv CustomersServiceServer) {
	s.RegisterService(&CustomersService_ServiceDesc, srv)
}

func _CustomersService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomersServiceServer).Paginate(m, &customersServicePaginateServer{stream})
}

type CustomersService_PaginateServer interface {
	Send(*CustomersResponse) error
	grpc.ServerStream
}

type customersServicePaginateServer struct {
	grpc.ServerStream
}

func (x *customersServicePaginateServer) Send(m *CustomersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CustomersService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomersServiceServer).Create(&customersServiceCreateServer{stream})
}

type CustomersService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*CustomersRequest, error)
	grpc.ServerStream
}

type customersServiceCreateServer struct {
	grpc.ServerStream
}

func (x *customersServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customersServiceCreateServer) Recv() (*CustomersRequest, error) {
	m := new(CustomersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CustomersService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomersServiceServer).Update(&customersServiceUpdateServer{stream})
}

type CustomersService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*CustomersRequest, error)
	grpc.ServerStream
}

type customersServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *customersServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customersServiceUpdateServer) Recv() (*CustomersRequest, error) {
	m := new(CustomersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CustomersService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomersServiceServer).Inactive(&customersServiceInactiveServer{stream})
}

type CustomersService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type customersServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *customersServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customersServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CustomersService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomersServiceServer).Active(&customersServiceActiveServer{stream})
}

type CustomersService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type customersServiceActiveServer struct {
	grpc.ServerStream
}

func (x *customersServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customersServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CustomersService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomersServiceServer).Delete(&customersServiceDeleteServer{stream})
}

type CustomersService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type customersServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *customersServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customersServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomersService_ServiceDesc is the grpc.ServiceDesc for CustomersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customers.CustomersService",
	HandlerType: (*CustomersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _CustomersService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _CustomersService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _CustomersService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _CustomersService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _CustomersService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _CustomersService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _CustomersService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _CustomersService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "customers.proto",
}
