// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: partners.proto

package partners

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnersService_Paginate_FullMethodName = "/soustify.datagateway.partners.PartnersService/Paginate"
	PartnersService_Count_FullMethodName    = "/soustify.datagateway.partners.PartnersService/Count"
	PartnersService_Create_FullMethodName   = "/soustify.datagateway.partners.PartnersService/Create"
	PartnersService_Update_FullMethodName   = "/soustify.datagateway.partners.PartnersService/Update"
	PartnersService_Inactive_FullMethodName = "/soustify.datagateway.partners.PartnersService/Inactive"
	PartnersService_Active_FullMethodName   = "/soustify.datagateway.partners.PartnersService/Active"
	PartnersService_FindOne_FullMethodName  = "/soustify.datagateway.partners.PartnersService/FindOne"
	PartnersService_Delete_FullMethodName   = "/soustify.datagateway.partners.PartnersService/Delete"
)

// PartnersServiceClient is the client API for PartnersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnersServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (PartnersService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (PartnersService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (PartnersService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersService_DeleteClient, error)
}

type partnersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnersServiceClient(cc grpc.ClientConnInterface) PartnersServiceClient {
	return &partnersServiceClient{cc}
}

func (c *partnersServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersService_ServiceDesc.Streams[0], PartnersService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartnersService_PaginateClient interface {
	Recv() (*PartnersResponse, error)
	grpc.ClientStream
}

type partnersServicePaginateClient struct {
	grpc.ClientStream
}

func (x *partnersServicePaginateClient) Recv() (*PartnersResponse, error) {
	m := new(PartnersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, PartnersService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (PartnersService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersService_ServiceDesc.Streams[1], PartnersService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersServiceCreateClient{stream}
	return x, nil
}

type PartnersService_CreateClient interface {
	Send(*PartnersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersServiceCreateClient struct {
	grpc.ClientStream
}

func (x *partnersServiceCreateClient) Send(m *PartnersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (PartnersService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersService_ServiceDesc.Streams[2], PartnersService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersServiceUpdateClient{stream}
	return x, nil
}

type PartnersService_UpdateClient interface {
	Send(*PartnersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *partnersServiceUpdateClient) Send(m *PartnersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersService_ServiceDesc.Streams[3], PartnersService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersServiceInactiveClient{stream}
	return x, nil
}

type PartnersService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *partnersServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (PartnersService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersService_ServiceDesc.Streams[4], PartnersService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersServiceActiveClient{stream}
	return x, nil
}

type PartnersService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersServiceActiveClient struct {
	grpc.ClientStream
}

func (x *partnersServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersResponse, error) {
	out := new(PartnersResponse)
	err := c.cc.Invoke(ctx, PartnersService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersService_ServiceDesc.Streams[5], PartnersService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersServiceDeleteClient{stream}
	return x, nil
}

type PartnersService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *partnersServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersServiceServer is the server API for PartnersService service.
// All implementations must embed UnimplementedPartnersServiceServer
// for forward compatibility
type PartnersServiceServer interface {
	Paginate(*input.PaginationRequest, PartnersService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(PartnersService_CreateServer) error
	Update(PartnersService_UpdateServer) error
	Inactive(PartnersService_InactiveServer) error
	Active(PartnersService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*PartnersResponse, error)
	Delete(PartnersService_DeleteServer) error
	mustEmbedUnimplementedPartnersServiceServer()
}

// UnimplementedPartnersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnersServiceServer struct {
}

func (UnimplementedPartnersServiceServer) Paginate(*input.PaginationRequest, PartnersService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedPartnersServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPartnersServiceServer) Create(PartnersService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPartnersServiceServer) Update(PartnersService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPartnersServiceServer) Inactive(PartnersService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedPartnersServiceServer) Active(PartnersService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedPartnersServiceServer) FindOne(context.Context, *input.UUIDRequest) (*PartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPartnersServiceServer) Delete(PartnersService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPartnersServiceServer) mustEmbedUnimplementedPartnersServiceServer() {}

// UnsafePartnersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnersServiceServer will
// result in compilation errors.
type UnsafePartnersServiceServer interface {
	mustEmbedUnimplementedPartnersServiceServer()
}

func RegisterPartnersServiceServer(s grpc.ServiceRegistrar, srv PartnersServiceServer) {
	s.RegisterService(&PartnersService_ServiceDesc, srv)
}

func _PartnersService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartnersServiceServer).Paginate(m, &partnersServicePaginateServer{stream})
}

type PartnersService_PaginateServer interface {
	Send(*PartnersResponse) error
	grpc.ServerStream
}

type partnersServicePaginateServer struct {
	grpc.ServerStream
}

func (x *partnersServicePaginateServer) Send(m *PartnersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PartnersService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersServiceServer).Create(&partnersServiceCreateServer{stream})
}

type PartnersService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersRequest, error)
	grpc.ServerStream
}

type partnersServiceCreateServer struct {
	grpc.ServerStream
}

func (x *partnersServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersServiceCreateServer) Recv() (*PartnersRequest, error) {
	m := new(PartnersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersServiceServer).Update(&partnersServiceUpdateServer{stream})
}

type PartnersService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersRequest, error)
	grpc.ServerStream
}

type partnersServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *partnersServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersServiceUpdateServer) Recv() (*PartnersRequest, error) {
	m := new(PartnersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersServiceServer).Inactive(&partnersServiceInactiveServer{stream})
}

type PartnersService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *partnersServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersServiceServer).Active(&partnersServiceActiveServer{stream})
}

type PartnersService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersServiceActiveServer struct {
	grpc.ServerStream
}

func (x *partnersServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersServiceServer).Delete(&partnersServiceDeleteServer{stream})
}

type PartnersService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *partnersServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersService_ServiceDesc is the grpc.ServiceDesc for PartnersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.partners.PartnersService",
	HandlerType: (*PartnersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _PartnersService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PartnersService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _PartnersService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _PartnersService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _PartnersService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _PartnersService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _PartnersService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _PartnersService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "partners.proto",
}
