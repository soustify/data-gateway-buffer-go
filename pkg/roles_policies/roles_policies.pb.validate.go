// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: roles_policies.proto

package roles_policies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = output.StatusResponse(0)
)

// define the regex for a UUID once up-front
var _roles_policies_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RolesPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RolesPoliciesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolesPoliciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RolesPoliciesRequestMultiError, or nil if none found.
func (m *RolesPoliciesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RolesPoliciesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIdRole()); err != nil {
		err = RolesPoliciesRequestValidationError{
			field:  "IdRole",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdPolicy()); err != nil {
		err = RolesPoliciesRequestValidationError{
			field:  "IdPolicy",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RolesPoliciesRequestMultiError(errors)
	}

	return nil
}

func (m *RolesPoliciesRequest) _validateUuid(uuid string) error {
	if matched := _roles_policies_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RolesPoliciesRequestMultiError is an error wrapping multiple validation
// errors returned by RolesPoliciesRequest.ValidateAll() if the designated
// constraints aren't met.
type RolesPoliciesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolesPoliciesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolesPoliciesRequestMultiError) AllErrors() []error { return m }

// RolesPoliciesRequestValidationError is the validation error returned by
// RolesPoliciesRequest.Validate if the designated constraints aren't met.
type RolesPoliciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolesPoliciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolesPoliciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolesPoliciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolesPoliciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolesPoliciesRequestValidationError) ErrorName() string {
	return "RolesPoliciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RolesPoliciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolesPoliciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolesPoliciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolesPoliciesRequestValidationError{}

// Validate checks the field values on RolesPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RolesPoliciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolesPoliciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RolesPoliciesResponseMultiError, or nil if none found.
func (m *RolesPoliciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RolesPoliciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIdRole()); err != nil {
		err = RolesPoliciesResponseValidationError{
			field:  "IdRole",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdPolicy()); err != nil {
		err = RolesPoliciesResponseValidationError{
			field:  "IdPolicy",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIdAuditable()); err != nil {
		err = RolesPoliciesResponseValidationError{
			field:  "IdAuditable",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if err := m._validateUuid(m.GetId()); err != nil {
		err = RolesPoliciesResponseValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RolesPoliciesResponseMultiError(errors)
	}

	return nil
}

func (m *RolesPoliciesResponse) _validateUuid(uuid string) error {
	if matched := _roles_policies_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RolesPoliciesResponseMultiError is an error wrapping multiple validation
// errors returned by RolesPoliciesResponse.ValidateAll() if the designated
// constraints aren't met.
type RolesPoliciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolesPoliciesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolesPoliciesResponseMultiError) AllErrors() []error { return m }

// RolesPoliciesResponseValidationError is the validation error returned by
// RolesPoliciesResponse.Validate if the designated constraints aren't met.
type RolesPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolesPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolesPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolesPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolesPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolesPoliciesResponseValidationError) ErrorName() string {
	return "RolesPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RolesPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolesPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolesPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolesPoliciesResponseValidationError{}
