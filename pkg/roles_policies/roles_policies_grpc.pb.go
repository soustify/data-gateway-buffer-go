// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: roles_policies.proto

package roles_policies

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RolesPoliciesService_Paginate_FullMethodName = "/soustify.datagateway.roles_policies.RolesPoliciesService/Paginate"
	RolesPoliciesService_Count_FullMethodName    = "/soustify.datagateway.roles_policies.RolesPoliciesService/Count"
	RolesPoliciesService_Create_FullMethodName   = "/soustify.datagateway.roles_policies.RolesPoliciesService/Create"
	RolesPoliciesService_Update_FullMethodName   = "/soustify.datagateway.roles_policies.RolesPoliciesService/Update"
	RolesPoliciesService_Inactive_FullMethodName = "/soustify.datagateway.roles_policies.RolesPoliciesService/Inactive"
	RolesPoliciesService_Active_FullMethodName   = "/soustify.datagateway.roles_policies.RolesPoliciesService/Active"
	RolesPoliciesService_FindOne_FullMethodName  = "/soustify.datagateway.roles_policies.RolesPoliciesService/FindOne"
	RolesPoliciesService_Delete_FullMethodName   = "/soustify.datagateway.roles_policies.RolesPoliciesService/Delete"
)

// RolesPoliciesServiceClient is the client API for RolesPoliciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolesPoliciesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (RolesPoliciesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*RolesPoliciesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_DeleteClient, error)
}

type rolesPoliciesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolesPoliciesServiceClient(cc grpc.ClientConnInterface) RolesPoliciesServiceClient {
	return &rolesPoliciesServiceClient{cc}
}

func (c *rolesPoliciesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (RolesPoliciesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesPoliciesService_ServiceDesc.Streams[0], RolesPoliciesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesPoliciesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolesPoliciesService_PaginateClient interface {
	Recv() (*RolesPoliciesResponse, error)
	grpc.ClientStream
}

type rolesPoliciesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *rolesPoliciesServicePaginateClient) Recv() (*RolesPoliciesResponse, error) {
	m := new(RolesPoliciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesPoliciesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, RolesPoliciesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesPoliciesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesPoliciesService_ServiceDesc.Streams[1], RolesPoliciesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesPoliciesServiceCreateClient{stream}
	return x, nil
}

type RolesPoliciesService_CreateClient interface {
	Send(*RolesPoliciesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesPoliciesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *rolesPoliciesServiceCreateClient) Send(m *RolesPoliciesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesPoliciesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesPoliciesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesPoliciesService_ServiceDesc.Streams[2], RolesPoliciesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesPoliciesServiceUpdateClient{stream}
	return x, nil
}

type RolesPoliciesService_UpdateClient interface {
	Send(*RolesPoliciesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesPoliciesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *rolesPoliciesServiceUpdateClient) Send(m *RolesPoliciesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesPoliciesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesPoliciesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesPoliciesService_ServiceDesc.Streams[3], RolesPoliciesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesPoliciesServiceInactiveClient{stream}
	return x, nil
}

type RolesPoliciesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type rolesPoliciesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *rolesPoliciesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesPoliciesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesPoliciesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesPoliciesService_ServiceDesc.Streams[4], RolesPoliciesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesPoliciesServiceActiveClient{stream}
	return x, nil
}

type RolesPoliciesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type rolesPoliciesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *rolesPoliciesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesPoliciesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesPoliciesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*RolesPoliciesResponse, error) {
	out := new(RolesPoliciesResponse)
	err := c.cc.Invoke(ctx, RolesPoliciesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesPoliciesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (RolesPoliciesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesPoliciesService_ServiceDesc.Streams[5], RolesPoliciesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesPoliciesServiceDeleteClient{stream}
	return x, nil
}

type RolesPoliciesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesPoliciesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *rolesPoliciesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesPoliciesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RolesPoliciesServiceServer is the server API for RolesPoliciesService service.
// All implementations must embed UnimplementedRolesPoliciesServiceServer
// for forward compatibility
type RolesPoliciesServiceServer interface {
	Paginate(*input.PaginationRequest, RolesPoliciesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(RolesPoliciesService_CreateServer) error
	Update(RolesPoliciesService_UpdateServer) error
	Inactive(RolesPoliciesService_InactiveServer) error
	Active(RolesPoliciesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*RolesPoliciesResponse, error)
	Delete(RolesPoliciesService_DeleteServer) error
	mustEmbedUnimplementedRolesPoliciesServiceServer()
}

// UnimplementedRolesPoliciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolesPoliciesServiceServer struct {
}

func (UnimplementedRolesPoliciesServiceServer) Paginate(*input.PaginationRequest, RolesPoliciesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) Create(RolesPoliciesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) Update(RolesPoliciesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) Inactive(RolesPoliciesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) Active(RolesPoliciesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*RolesPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) Delete(RolesPoliciesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRolesPoliciesServiceServer) mustEmbedUnimplementedRolesPoliciesServiceServer() {}

// UnsafeRolesPoliciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolesPoliciesServiceServer will
// result in compilation errors.
type UnsafeRolesPoliciesServiceServer interface {
	mustEmbedUnimplementedRolesPoliciesServiceServer()
}

func RegisterRolesPoliciesServiceServer(s grpc.ServiceRegistrar, srv RolesPoliciesServiceServer) {
	s.RegisterService(&RolesPoliciesService_ServiceDesc, srv)
}

func _RolesPoliciesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolesPoliciesServiceServer).Paginate(m, &rolesPoliciesServicePaginateServer{stream})
}

type RolesPoliciesService_PaginateServer interface {
	Send(*RolesPoliciesResponse) error
	grpc.ServerStream
}

type rolesPoliciesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *rolesPoliciesServicePaginateServer) Send(m *RolesPoliciesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RolesPoliciesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesPoliciesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesPoliciesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesPoliciesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesPoliciesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesPoliciesServiceServer).Create(&rolesPoliciesServiceCreateServer{stream})
}

type RolesPoliciesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*RolesPoliciesRequest, error)
	grpc.ServerStream
}

type rolesPoliciesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *rolesPoliciesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesPoliciesServiceCreateServer) Recv() (*RolesPoliciesRequest, error) {
	m := new(RolesPoliciesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesPoliciesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesPoliciesServiceServer).Update(&rolesPoliciesServiceUpdateServer{stream})
}

type RolesPoliciesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*RolesPoliciesRequest, error)
	grpc.ServerStream
}

type rolesPoliciesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *rolesPoliciesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesPoliciesServiceUpdateServer) Recv() (*RolesPoliciesRequest, error) {
	m := new(RolesPoliciesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesPoliciesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesPoliciesServiceServer).Inactive(&rolesPoliciesServiceInactiveServer{stream})
}

type RolesPoliciesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesPoliciesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *rolesPoliciesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesPoliciesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesPoliciesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesPoliciesServiceServer).Active(&rolesPoliciesServiceActiveServer{stream})
}

type RolesPoliciesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesPoliciesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *rolesPoliciesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesPoliciesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesPoliciesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesPoliciesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesPoliciesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesPoliciesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesPoliciesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesPoliciesServiceServer).Delete(&rolesPoliciesServiceDeleteServer{stream})
}

type RolesPoliciesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesPoliciesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *rolesPoliciesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesPoliciesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RolesPoliciesService_ServiceDesc is the grpc.ServiceDesc for RolesPoliciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolesPoliciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.roles_policies.RolesPoliciesService",
	HandlerType: (*RolesPoliciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _RolesPoliciesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _RolesPoliciesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _RolesPoliciesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _RolesPoliciesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _RolesPoliciesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _RolesPoliciesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _RolesPoliciesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _RolesPoliciesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "roles_policies.proto",
}
