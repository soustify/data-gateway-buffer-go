// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: applications.proto

package applications

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApplicationsService_Paginate_FullMethodName = "/soustify.datagateway.applications.ApplicationsService/Paginate"
	ApplicationsService_Count_FullMethodName    = "/soustify.datagateway.applications.ApplicationsService/Count"
	ApplicationsService_Create_FullMethodName   = "/soustify.datagateway.applications.ApplicationsService/Create"
	ApplicationsService_Update_FullMethodName   = "/soustify.datagateway.applications.ApplicationsService/Update"
	ApplicationsService_Inactive_FullMethodName = "/soustify.datagateway.applications.ApplicationsService/Inactive"
	ApplicationsService_Active_FullMethodName   = "/soustify.datagateway.applications.ApplicationsService/Active"
	ApplicationsService_FindOne_FullMethodName  = "/soustify.datagateway.applications.ApplicationsService/FindOne"
	ApplicationsService_Delete_FullMethodName   = "/soustify.datagateway.applications.ApplicationsService/Delete"
)

// ApplicationsServiceClient is the client API for ApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (ApplicationsService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ApplicationsResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_DeleteClient, error)
}

type applicationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsServiceClient(cc grpc.ClientConnInterface) ApplicationsServiceClient {
	return &applicationsServiceClient{cc}
}

func (c *applicationsServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (ApplicationsService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationsService_ServiceDesc.Streams[0], ApplicationsService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationsService_PaginateClient interface {
	Recv() (*ApplicationsResponse, error)
	grpc.ClientStream
}

type applicationsServicePaginateClient struct {
	grpc.ClientStream
}

func (x *applicationsServicePaginateClient) Recv() (*ApplicationsResponse, error) {
	m := new(ApplicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, ApplicationsService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationsService_ServiceDesc.Streams[1], ApplicationsService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsServiceCreateClient{stream}
	return x, nil
}

type ApplicationsService_CreateClient interface {
	Send(*ApplicationsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type applicationsServiceCreateClient struct {
	grpc.ClientStream
}

func (x *applicationsServiceCreateClient) Send(m *ApplicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationsServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationsService_ServiceDesc.Streams[2], ApplicationsService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsServiceUpdateClient{stream}
	return x, nil
}

type ApplicationsService_UpdateClient interface {
	Send(*ApplicationsRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type applicationsServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *applicationsServiceUpdateClient) Send(m *ApplicationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationsServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationsService_ServiceDesc.Streams[3], ApplicationsService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsServiceInactiveClient{stream}
	return x, nil
}

type ApplicationsService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type applicationsServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *applicationsServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationsServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationsService_ServiceDesc.Streams[4], ApplicationsService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsServiceActiveClient{stream}
	return x, nil
}

type ApplicationsService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type applicationsServiceActiveClient struct {
	grpc.ClientStream
}

func (x *applicationsServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationsServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*ApplicationsResponse, error) {
	out := new(ApplicationsResponse)
	err := c.cc.Invoke(ctx, ApplicationsService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (ApplicationsService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationsService_ServiceDesc.Streams[5], ApplicationsService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsServiceDeleteClient{stream}
	return x, nil
}

type ApplicationsService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type applicationsServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *applicationsServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationsServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationsServiceServer is the server API for ApplicationsService service.
// All implementations must embed UnimplementedApplicationsServiceServer
// for forward compatibility
type ApplicationsServiceServer interface {
	Paginate(*input.PaginationRequest, ApplicationsService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(ApplicationsService_CreateServer) error
	Update(ApplicationsService_UpdateServer) error
	Inactive(ApplicationsService_InactiveServer) error
	Active(ApplicationsService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*ApplicationsResponse, error)
	Delete(ApplicationsService_DeleteServer) error
	mustEmbedUnimplementedApplicationsServiceServer()
}

// UnimplementedApplicationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServiceServer struct {
}

func (UnimplementedApplicationsServiceServer) Paginate(*input.PaginationRequest, ApplicationsService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedApplicationsServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedApplicationsServiceServer) Create(ApplicationsService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationsServiceServer) Update(ApplicationsService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationsServiceServer) Inactive(ApplicationsService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedApplicationsServiceServer) Active(ApplicationsService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedApplicationsServiceServer) FindOne(context.Context, *input.UUIDRequest) (*ApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedApplicationsServiceServer) Delete(ApplicationsService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationsServiceServer) mustEmbedUnimplementedApplicationsServiceServer() {}

// UnsafeApplicationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServiceServer will
// result in compilation errors.
type UnsafeApplicationsServiceServer interface {
	mustEmbedUnimplementedApplicationsServiceServer()
}

func RegisterApplicationsServiceServer(s grpc.ServiceRegistrar, srv ApplicationsServiceServer) {
	s.RegisterService(&ApplicationsService_ServiceDesc, srv)
}

func _ApplicationsService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationsServiceServer).Paginate(m, &applicationsServicePaginateServer{stream})
}

type ApplicationsService_PaginateServer interface {
	Send(*ApplicationsResponse) error
	grpc.ServerStream
}

type applicationsServicePaginateServer struct {
	grpc.ServerStream
}

func (x *applicationsServicePaginateServer) Send(m *ApplicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApplicationsService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationsServiceServer).Create(&applicationsServiceCreateServer{stream})
}

type ApplicationsService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*ApplicationsRequest, error)
	grpc.ServerStream
}

type applicationsServiceCreateServer struct {
	grpc.ServerStream
}

func (x *applicationsServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationsServiceCreateServer) Recv() (*ApplicationsRequest, error) {
	m := new(ApplicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApplicationsService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationsServiceServer).Update(&applicationsServiceUpdateServer{stream})
}

type ApplicationsService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*ApplicationsRequest, error)
	grpc.ServerStream
}

type applicationsServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *applicationsServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationsServiceUpdateServer) Recv() (*ApplicationsRequest, error) {
	m := new(ApplicationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApplicationsService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationsServiceServer).Inactive(&applicationsServiceInactiveServer{stream})
}

type ApplicationsService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type applicationsServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *applicationsServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationsServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApplicationsService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationsServiceServer).Active(&applicationsServiceActiveServer{stream})
}

type ApplicationsService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type applicationsServiceActiveServer struct {
	grpc.ServerStream
}

func (x *applicationsServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationsServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApplicationsService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationsServiceServer).Delete(&applicationsServiceDeleteServer{stream})
}

type ApplicationsService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type applicationsServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *applicationsServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationsServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationsService_ServiceDesc is the grpc.ServiceDesc for ApplicationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.applications.ApplicationsService",
	HandlerType: (*ApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _ApplicationsService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _ApplicationsService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _ApplicationsService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _ApplicationsService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _ApplicationsService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _ApplicationsService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _ApplicationsService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _ApplicationsService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "applications.proto",
}
