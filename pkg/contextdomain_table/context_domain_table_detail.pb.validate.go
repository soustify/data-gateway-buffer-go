// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: context_domain_table_detail.proto

package contextdomain_table

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _context_domain_table_detail_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegistryEntityAuditRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistryEntityAuditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryEntityAuditRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryEntityAuditRequestMultiError, or nil if none found.
func (m *RegistryEntityAuditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryEntityAuditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntityTable

	if err := m._validateUuid(m.GetEntityId()); err != nil {
		err = RegistryEntityAuditRequestValidationError{
			field:  "EntityId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetContextDetailId()); err != nil {
		err = RegistryEntityAuditRequestValidationError{
			field:  "ContextDetailId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegistryEntityAuditRequestMultiError(errors)
	}

	return nil
}

func (m *RegistryEntityAuditRequest) _validateUuid(uuid string) error {
	if matched := _context_domain_table_detail_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegistryEntityAuditRequestMultiError is an error wrapping multiple
// validation errors returned by RegistryEntityAuditRequest.ValidateAll() if
// the designated constraints aren't met.
type RegistryEntityAuditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryEntityAuditRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryEntityAuditRequestMultiError) AllErrors() []error { return m }

// RegistryEntityAuditRequestValidationError is the validation error returned
// by RegistryEntityAuditRequest.Validate if the designated constraints aren't met.
type RegistryEntityAuditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryEntityAuditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryEntityAuditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryEntityAuditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryEntityAuditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryEntityAuditRequestValidationError) ErrorName() string {
	return "RegistryEntityAuditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryEntityAuditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryEntityAuditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryEntityAuditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryEntityAuditRequestValidationError{}

// Validate checks the field values on Changes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Changes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Changes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChangesMultiError, or nil if none found.
func (m *Changes) ValidateAll() error {
	return m.validate(true)
}

func (m *Changes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Old

	// no validation rules for New

	if len(errors) > 0 {
		return ChangesMultiError(errors)
	}

	return nil
}

// ChangesMultiError is an error wrapping multiple validation errors returned
// by Changes.ValidateAll() if the designated constraints aren't met.
type ChangesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangesMultiError) AllErrors() []error { return m }

// ChangesValidationError is the validation error returned by Changes.Validate
// if the designated constraints aren't met.
type ChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangesValidationError) ErrorName() string { return "ChangesValidationError" }

// Error satisfies the builtin error interface
func (e ChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangesValidationError{}

// Validate checks the field values on ContextDomainTableDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContextDomainTableDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContextDomainTableDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContextDomainTableDetailRequestMultiError, or nil if none found.
func (m *ContextDomainTableDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContextDomainTableDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ContextDomainTableDetailRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetTransactionId()); err != nil {
		err = ContextDomainTableDetailRequestValidationError{
			field:  "TransactionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetEntityId()); err != nil {
		err = ContextDomainTableDetailRequestValidationError{
			field:  "EntityId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEntityTable()) < 10 {
		err := ContextDomainTableDetailRequestValidationError{
			field:  "EntityTable",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ContextDomainTableDetailRequest_Operation_InLookup[m.GetOperation()]; !ok {
		err := ContextDomainTableDetailRequestValidationError{
			field:  "Operation",
			reason: "value must be in list [INSERT UPDATE DELETE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContextDomainTableDetailRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContextDomainTableDetailRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContextDomainTableDetailRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContextDomainTableDetailRequestMultiError(errors)
	}

	return nil
}

func (m *ContextDomainTableDetailRequest) _validateUuid(uuid string) error {
	if matched := _context_domain_table_detail_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ContextDomainTableDetailRequestMultiError is an error wrapping multiple
// validation errors returned by ContextDomainTableDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type ContextDomainTableDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContextDomainTableDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContextDomainTableDetailRequestMultiError) AllErrors() []error { return m }

// ContextDomainTableDetailRequestValidationError is the validation error
// returned by ContextDomainTableDetailRequest.Validate if the designated
// constraints aren't met.
type ContextDomainTableDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextDomainTableDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextDomainTableDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextDomainTableDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextDomainTableDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextDomainTableDetailRequestValidationError) ErrorName() string {
	return "ContextDomainTableDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContextDomainTableDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContextDomainTableDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextDomainTableDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextDomainTableDetailRequestValidationError{}

var _ContextDomainTableDetailRequest_Operation_InLookup = map[Operation]struct{}{
	0: {},
	1: {},
	2: {},
}
