// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: categories.proto

package categories

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CategoriesService_Paginate_FullMethodName = "/soustify.datagateway.categories.CategoriesService/Paginate"
	CategoriesService_Count_FullMethodName    = "/soustify.datagateway.categories.CategoriesService/Count"
	CategoriesService_Create_FullMethodName   = "/soustify.datagateway.categories.CategoriesService/Create"
	CategoriesService_Update_FullMethodName   = "/soustify.datagateway.categories.CategoriesService/Update"
	CategoriesService_Inactive_FullMethodName = "/soustify.datagateway.categories.CategoriesService/Inactive"
	CategoriesService_Active_FullMethodName   = "/soustify.datagateway.categories.CategoriesService/Active"
	CategoriesService_FindOne_FullMethodName  = "/soustify.datagateway.categories.CategoriesService/FindOne"
	CategoriesService_Delete_FullMethodName   = "/soustify.datagateway.categories.CategoriesService/Delete"
)

// CategoriesServiceClient is the client API for CategoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (CategoriesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*CategoriesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_DeleteClient, error)
}

type categoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesServiceClient(cc grpc.ClientConnInterface) CategoriesServiceClient {
	return &categoriesServiceClient{cc}
}

func (c *categoriesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (CategoriesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[0], CategoriesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoriesService_PaginateClient interface {
	Recv() (*CategoriesResponse, error)
	grpc.ClientStream
}

type categoriesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *categoriesServicePaginateClient) Recv() (*CategoriesResponse, error) {
	m := new(CategoriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, CategoriesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[1], CategoriesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServiceCreateClient{stream}
	return x, nil
}

type CategoriesService_CreateClient interface {
	Send(*CategoriesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type categoriesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *categoriesServiceCreateClient) Send(m *CategoriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[2], CategoriesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServiceUpdateClient{stream}
	return x, nil
}

type CategoriesService_UpdateClient interface {
	Send(*CategoriesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type categoriesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *categoriesServiceUpdateClient) Send(m *CategoriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[3], CategoriesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServiceInactiveClient{stream}
	return x, nil
}

type CategoriesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type categoriesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *categoriesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[4], CategoriesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServiceActiveClient{stream}
	return x, nil
}

type CategoriesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type categoriesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *categoriesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*CategoriesResponse, error) {
	out := new(CategoriesResponse)
	err := c.cc.Invoke(ctx, CategoriesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[5], CategoriesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServiceDeleteClient{stream}
	return x, nil
}

type CategoriesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type categoriesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *categoriesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoriesServiceServer is the server API for CategoriesService service.
// All implementations must embed UnimplementedCategoriesServiceServer
// for forward compatibility
type CategoriesServiceServer interface {
	Paginate(*input.PaginationRequest, CategoriesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(CategoriesService_CreateServer) error
	Update(CategoriesService_UpdateServer) error
	Inactive(CategoriesService_InactiveServer) error
	Active(CategoriesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*CategoriesResponse, error)
	Delete(CategoriesService_DeleteServer) error
	mustEmbedUnimplementedCategoriesServiceServer()
}

// UnimplementedCategoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoriesServiceServer struct {
}

func (UnimplementedCategoriesServiceServer) Paginate(*input.PaginationRequest, CategoriesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedCategoriesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedCategoriesServiceServer) Create(CategoriesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoriesServiceServer) Update(CategoriesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoriesServiceServer) Inactive(CategoriesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedCategoriesServiceServer) Active(CategoriesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedCategoriesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*CategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedCategoriesServiceServer) Delete(CategoriesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCategoriesServiceServer) mustEmbedUnimplementedCategoriesServiceServer() {}

// UnsafeCategoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriesServiceServer will
// result in compilation errors.
type UnsafeCategoriesServiceServer interface {
	mustEmbedUnimplementedCategoriesServiceServer()
}

func RegisterCategoriesServiceServer(s grpc.ServiceRegistrar, srv CategoriesServiceServer) {
	s.RegisterService(&CategoriesService_ServiceDesc, srv)
}

func _CategoriesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoriesServiceServer).Paginate(m, &categoriesServicePaginateServer{stream})
}

type CategoriesService_PaginateServer interface {
	Send(*CategoriesResponse) error
	grpc.ServerStream
}

type categoriesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *categoriesServicePaginateServer) Send(m *CategoriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CategoriesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServiceServer).Create(&categoriesServiceCreateServer{stream})
}

type CategoriesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*CategoriesRequest, error)
	grpc.ServerStream
}

type categoriesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *categoriesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServiceCreateServer) Recv() (*CategoriesRequest, error) {
	m := new(CategoriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServiceServer).Update(&categoriesServiceUpdateServer{stream})
}

type CategoriesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*CategoriesRequest, error)
	grpc.ServerStream
}

type categoriesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *categoriesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServiceUpdateServer) Recv() (*CategoriesRequest, error) {
	m := new(CategoriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServiceServer).Inactive(&categoriesServiceInactiveServer{stream})
}

type CategoriesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type categoriesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *categoriesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServiceServer).Active(&categoriesServiceActiveServer{stream})
}

type CategoriesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type categoriesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *categoriesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServiceServer).Delete(&categoriesServiceDeleteServer{stream})
}

type CategoriesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type categoriesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *categoriesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoriesService_ServiceDesc is the grpc.ServiceDesc for CategoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "soustify.datagateway.categories.CategoriesService",
	HandlerType: (*CategoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _CategoriesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _CategoriesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _CategoriesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _CategoriesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _CategoriesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _CategoriesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _CategoriesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _CategoriesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "categories.proto",
}
