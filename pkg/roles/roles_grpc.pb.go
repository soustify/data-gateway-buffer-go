// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: roles.proto

package roles

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RolesService_Paginate_FullMethodName = "/roles.RolesService/Paginate"
	RolesService_Count_FullMethodName    = "/roles.RolesService/Count"
	RolesService_Create_FullMethodName   = "/roles.RolesService/Create"
	RolesService_Update_FullMethodName   = "/roles.RolesService/Update"
	RolesService_Inactive_FullMethodName = "/roles.RolesService/Inactive"
	RolesService_Active_FullMethodName   = "/roles.RolesService/Active"
	RolesService_FindOne_FullMethodName  = "/roles.RolesService/FindOne"
	RolesService_Delete_FullMethodName   = "/roles.RolesService/Delete"
)

// RolesServiceClient is the client API for RolesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (RolesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (RolesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (RolesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (RolesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (RolesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*RolesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (RolesService_DeleteClient, error)
}

type rolesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolesServiceClient(cc grpc.ClientConnInterface) RolesServiceClient {
	return &rolesServiceClient{cc}
}

func (c *rolesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (RolesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesService_ServiceDesc.Streams[0], RolesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolesService_PaginateClient interface {
	Recv() (*RolesResponse, error)
	grpc.ClientStream
}

type rolesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *rolesServicePaginateClient) Recv() (*RolesResponse, error) {
	m := new(RolesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, RolesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (RolesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesService_ServiceDesc.Streams[1], RolesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesServiceCreateClient{stream}
	return x, nil
}

type RolesService_CreateClient interface {
	Send(*RolesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *rolesServiceCreateClient) Send(m *RolesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (RolesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesService_ServiceDesc.Streams[2], RolesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesServiceUpdateClient{stream}
	return x, nil
}

type RolesService_UpdateClient interface {
	Send(*RolesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *rolesServiceUpdateClient) Send(m *RolesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (RolesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesService_ServiceDesc.Streams[3], RolesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesServiceInactiveClient{stream}
	return x, nil
}

type RolesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type rolesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *rolesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (RolesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesService_ServiceDesc.Streams[4], RolesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesServiceActiveClient{stream}
	return x, nil
}

type RolesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type rolesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *rolesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := c.cc.Invoke(ctx, RolesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (RolesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesService_ServiceDesc.Streams[5], RolesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesServiceDeleteClient{stream}
	return x, nil
}

type RolesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type rolesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *rolesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RolesServiceServer is the server API for RolesService service.
// All implementations must embed UnimplementedRolesServiceServer
// for forward compatibility
type RolesServiceServer interface {
	Paginate(*input.PaginationRequest, RolesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(RolesService_CreateServer) error
	Update(RolesService_UpdateServer) error
	Inactive(RolesService_InactiveServer) error
	Active(RolesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*RolesResponse, error)
	Delete(RolesService_DeleteServer) error
	mustEmbedUnimplementedRolesServiceServer()
}

// UnimplementedRolesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolesServiceServer struct {
}

func (UnimplementedRolesServiceServer) Paginate(*input.PaginationRequest, RolesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedRolesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedRolesServiceServer) Create(RolesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRolesServiceServer) Update(RolesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRolesServiceServer) Inactive(RolesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedRolesServiceServer) Active(RolesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedRolesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*RolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedRolesServiceServer) Delete(RolesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRolesServiceServer) mustEmbedUnimplementedRolesServiceServer() {}

// UnsafeRolesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolesServiceServer will
// result in compilation errors.
type UnsafeRolesServiceServer interface {
	mustEmbedUnimplementedRolesServiceServer()
}

func RegisterRolesServiceServer(s grpc.ServiceRegistrar, srv RolesServiceServer) {
	s.RegisterService(&RolesService_ServiceDesc, srv)
}

func _RolesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolesServiceServer).Paginate(m, &rolesServicePaginateServer{stream})
}

type RolesService_PaginateServer interface {
	Send(*RolesResponse) error
	grpc.ServerStream
}

type rolesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *rolesServicePaginateServer) Send(m *RolesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RolesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesServiceServer).Create(&rolesServiceCreateServer{stream})
}

type RolesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*RolesRequest, error)
	grpc.ServerStream
}

type rolesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *rolesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesServiceCreateServer) Recv() (*RolesRequest, error) {
	m := new(RolesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesServiceServer).Update(&rolesServiceUpdateServer{stream})
}

type RolesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*RolesRequest, error)
	grpc.ServerStream
}

type rolesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *rolesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesServiceUpdateServer) Recv() (*RolesRequest, error) {
	m := new(RolesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesServiceServer).Inactive(&rolesServiceInactiveServer{stream})
}

type RolesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *rolesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesServiceServer).Active(&rolesServiceActiveServer{stream})
}

type RolesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *rolesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RolesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolesServiceServer).Delete(&rolesServiceDeleteServer{stream})
}

type RolesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type rolesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *rolesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RolesService_ServiceDesc is the grpc.ServiceDesc for RolesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roles.RolesService",
	HandlerType: (*RolesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _RolesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _RolesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _RolesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _RolesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _RolesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _RolesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _RolesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _RolesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "roles.proto",
}
