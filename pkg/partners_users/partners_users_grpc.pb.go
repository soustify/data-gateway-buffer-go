// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: partners_users.proto

package partners_users

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartnersUsersService_Paginate_FullMethodName = "/partners_users.PartnersUsersService/Paginate"
	PartnersUsersService_Count_FullMethodName    = "/partners_users.PartnersUsersService/Count"
	PartnersUsersService_Create_FullMethodName   = "/partners_users.PartnersUsersService/Create"
	PartnersUsersService_Update_FullMethodName   = "/partners_users.PartnersUsersService/Update"
	PartnersUsersService_Inactive_FullMethodName = "/partners_users.PartnersUsersService/Inactive"
	PartnersUsersService_Active_FullMethodName   = "/partners_users.PartnersUsersService/Active"
	PartnersUsersService_FindOne_FullMethodName  = "/partners_users.PartnersUsersService/FindOne"
	PartnersUsersService_Delete_FullMethodName   = "/partners_users.PartnersUsersService/Delete"
)

// PartnersUsersServiceClient is the client API for PartnersUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnersUsersServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersUsersService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersUsersResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_DeleteClient, error)
}

type partnersUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnersUsersServiceClient(cc grpc.ClientConnInterface) PartnersUsersServiceClient {
	return &partnersUsersServiceClient{cc}
}

func (c *partnersUsersServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (PartnersUsersService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersUsersService_ServiceDesc.Streams[0], PartnersUsersService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersUsersServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartnersUsersService_PaginateClient interface {
	Recv() (*PartnersUsersResponse, error)
	grpc.ClientStream
}

type partnersUsersServicePaginateClient struct {
	grpc.ClientStream
}

func (x *partnersUsersServicePaginateClient) Recv() (*PartnersUsersResponse, error) {
	m := new(PartnersUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersUsersServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, PartnersUsersService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersUsersServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersUsersService_ServiceDesc.Streams[1], PartnersUsersService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersUsersServiceCreateClient{stream}
	return x, nil
}

type PartnersUsersService_CreateClient interface {
	Send(*PartnersUsersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersUsersServiceCreateClient struct {
	grpc.ClientStream
}

func (x *partnersUsersServiceCreateClient) Send(m *PartnersUsersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersUsersServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersUsersServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersUsersService_ServiceDesc.Streams[2], PartnersUsersService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersUsersServiceUpdateClient{stream}
	return x, nil
}

type PartnersUsersService_UpdateClient interface {
	Send(*PartnersUsersRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersUsersServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *partnersUsersServiceUpdateClient) Send(m *PartnersUsersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersUsersServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersUsersServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersUsersService_ServiceDesc.Streams[3], PartnersUsersService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersUsersServiceInactiveClient{stream}
	return x, nil
}

type PartnersUsersService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersUsersServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *partnersUsersServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersUsersServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersUsersServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersUsersService_ServiceDesc.Streams[4], PartnersUsersService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersUsersServiceActiveClient{stream}
	return x, nil
}

type PartnersUsersService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type partnersUsersServiceActiveClient struct {
	grpc.ClientStream
}

func (x *partnersUsersServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersUsersServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partnersUsersServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*PartnersUsersResponse, error) {
	out := new(PartnersUsersResponse)
	err := c.cc.Invoke(ctx, PartnersUsersService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersUsersServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (PartnersUsersService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartnersUsersService_ServiceDesc.Streams[5], PartnersUsersService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &partnersUsersServiceDeleteClient{stream}
	return x, nil
}

type PartnersUsersService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type partnersUsersServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *partnersUsersServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *partnersUsersServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersUsersServiceServer is the server API for PartnersUsersService service.
// All implementations must embed UnimplementedPartnersUsersServiceServer
// for forward compatibility
type PartnersUsersServiceServer interface {
	Paginate(*input.PaginationRequest, PartnersUsersService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(PartnersUsersService_CreateServer) error
	Update(PartnersUsersService_UpdateServer) error
	Inactive(PartnersUsersService_InactiveServer) error
	Active(PartnersUsersService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*PartnersUsersResponse, error)
	Delete(PartnersUsersService_DeleteServer) error
	mustEmbedUnimplementedPartnersUsersServiceServer()
}

// UnimplementedPartnersUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartnersUsersServiceServer struct {
}

func (UnimplementedPartnersUsersServiceServer) Paginate(*input.PaginationRequest, PartnersUsersService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedPartnersUsersServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPartnersUsersServiceServer) Create(PartnersUsersService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPartnersUsersServiceServer) Update(PartnersUsersService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPartnersUsersServiceServer) Inactive(PartnersUsersService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedPartnersUsersServiceServer) Active(PartnersUsersService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedPartnersUsersServiceServer) FindOne(context.Context, *input.UUIDRequest) (*PartnersUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPartnersUsersServiceServer) Delete(PartnersUsersService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPartnersUsersServiceServer) mustEmbedUnimplementedPartnersUsersServiceServer() {}

// UnsafePartnersUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnersUsersServiceServer will
// result in compilation errors.
type UnsafePartnersUsersServiceServer interface {
	mustEmbedUnimplementedPartnersUsersServiceServer()
}

func RegisterPartnersUsersServiceServer(s grpc.ServiceRegistrar, srv PartnersUsersServiceServer) {
	s.RegisterService(&PartnersUsersService_ServiceDesc, srv)
}

func _PartnersUsersService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartnersUsersServiceServer).Paginate(m, &partnersUsersServicePaginateServer{stream})
}

type PartnersUsersService_PaginateServer interface {
	Send(*PartnersUsersResponse) error
	grpc.ServerStream
}

type partnersUsersServicePaginateServer struct {
	grpc.ServerStream
}

func (x *partnersUsersServicePaginateServer) Send(m *PartnersUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PartnersUsersService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersUsersServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersUsersService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersUsersServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersUsersService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersUsersServiceServer).Create(&partnersUsersServiceCreateServer{stream})
}

type PartnersUsersService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersUsersRequest, error)
	grpc.ServerStream
}

type partnersUsersServiceCreateServer struct {
	grpc.ServerStream
}

func (x *partnersUsersServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersUsersServiceCreateServer) Recv() (*PartnersUsersRequest, error) {
	m := new(PartnersUsersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersUsersService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersUsersServiceServer).Update(&partnersUsersServiceUpdateServer{stream})
}

type PartnersUsersService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*PartnersUsersRequest, error)
	grpc.ServerStream
}

type partnersUsersServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *partnersUsersServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersUsersServiceUpdateServer) Recv() (*PartnersUsersRequest, error) {
	m := new(PartnersUsersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersUsersService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersUsersServiceServer).Inactive(&partnersUsersServiceInactiveServer{stream})
}

type PartnersUsersService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersUsersServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *partnersUsersServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersUsersServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersUsersService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersUsersServiceServer).Active(&partnersUsersServiceActiveServer{stream})
}

type PartnersUsersService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersUsersServiceActiveServer struct {
	grpc.ServerStream
}

func (x *partnersUsersServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersUsersServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PartnersUsersService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersUsersServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnersUsersService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersUsersServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnersUsersService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PartnersUsersServiceServer).Delete(&partnersUsersServiceDeleteServer{stream})
}

type PartnersUsersService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type partnersUsersServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *partnersUsersServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *partnersUsersServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartnersUsersService_ServiceDesc is the grpc.ServiceDesc for PartnersUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnersUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partners_users.PartnersUsersService",
	HandlerType: (*PartnersUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _PartnersUsersService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PartnersUsersService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _PartnersUsersService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _PartnersUsersService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _PartnersUsersService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _PartnersUsersService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _PartnersUsersService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _PartnersUsersService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "partners_users.proto",
}
