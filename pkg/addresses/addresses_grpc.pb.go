// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: addresses.proto

package addresses

import (
	context "context"
	input "github.com/soustify/data-gateway-buffer-go/pkg/input"
	output "github.com/soustify/data-gateway-buffer-go/pkg/output"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AddressesService_Paginate_FullMethodName = "/addresses.AddressesService/Paginate"
	AddressesService_Count_FullMethodName    = "/addresses.AddressesService/Count"
	AddressesService_Create_FullMethodName   = "/addresses.AddressesService/Create"
	AddressesService_Update_FullMethodName   = "/addresses.AddressesService/Update"
	AddressesService_Inactive_FullMethodName = "/addresses.AddressesService/Inactive"
	AddressesService_Active_FullMethodName   = "/addresses.AddressesService/Active"
	AddressesService_FindOne_FullMethodName  = "/addresses.AddressesService/FindOne"
	AddressesService_Delete_FullMethodName   = "/addresses.AddressesService/Delete"
)

// AddressesServiceClient is the client API for AddressesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressesServiceClient interface {
	Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (AddressesService_PaginateClient, error)
	Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error)
	Create(ctx context.Context, opts ...grpc.CallOption) (AddressesService_CreateClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (AddressesService_UpdateClient, error)
	Inactive(ctx context.Context, opts ...grpc.CallOption) (AddressesService_InactiveClient, error)
	Active(ctx context.Context, opts ...grpc.CallOption) (AddressesService_ActiveClient, error)
	FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*AddressesResponse, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (AddressesService_DeleteClient, error)
}

type addressesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressesServiceClient(cc grpc.ClientConnInterface) AddressesServiceClient {
	return &addressesServiceClient{cc}
}

func (c *addressesServiceClient) Paginate(ctx context.Context, in *input.PaginationRequest, opts ...grpc.CallOption) (AddressesService_PaginateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddressesService_ServiceDesc.Streams[0], AddressesService_Paginate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &addressesServicePaginateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AddressesService_PaginateClient interface {
	Recv() (*AddressesResponse, error)
	grpc.ClientStream
}

type addressesServicePaginateClient struct {
	grpc.ClientStream
}

func (x *addressesServicePaginateClient) Recv() (*AddressesResponse, error) {
	m := new(AddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressesServiceClient) Count(ctx context.Context, in *input.FilteredRequest, opts ...grpc.CallOption) (*output.CountResponse, error) {
	out := new(output.CountResponse)
	err := c.cc.Invoke(ctx, AddressesService_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesServiceClient) Create(ctx context.Context, opts ...grpc.CallOption) (AddressesService_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddressesService_ServiceDesc.Streams[1], AddressesService_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &addressesServiceCreateClient{stream}
	return x, nil
}

type AddressesService_CreateClient interface {
	Send(*AddressesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type addressesServiceCreateClient struct {
	grpc.ClientStream
}

func (x *addressesServiceCreateClient) Send(m *AddressesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addressesServiceCreateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressesServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (AddressesService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddressesService_ServiceDesc.Streams[2], AddressesService_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &addressesServiceUpdateClient{stream}
	return x, nil
}

type AddressesService_UpdateClient interface {
	Send(*AddressesRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type addressesServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *addressesServiceUpdateClient) Send(m *AddressesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addressesServiceUpdateClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressesServiceClient) Inactive(ctx context.Context, opts ...grpc.CallOption) (AddressesService_InactiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddressesService_ServiceDesc.Streams[3], AddressesService_Inactive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &addressesServiceInactiveClient{stream}
	return x, nil
}

type AddressesService_InactiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type addressesServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *addressesServiceInactiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addressesServiceInactiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressesServiceClient) Active(ctx context.Context, opts ...grpc.CallOption) (AddressesService_ActiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddressesService_ServiceDesc.Streams[4], AddressesService_Active_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &addressesServiceActiveClient{stream}
	return x, nil
}

type AddressesService_ActiveClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.StatusDataResponse, error)
	grpc.ClientStream
}

type addressesServiceActiveClient struct {
	grpc.ClientStream
}

func (x *addressesServiceActiveClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addressesServiceActiveClient) CloseAndRecv() (*output.StatusDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.StatusDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressesServiceClient) FindOne(ctx context.Context, in *input.UUIDRequest, opts ...grpc.CallOption) (*AddressesResponse, error) {
	out := new(AddressesResponse)
	err := c.cc.Invoke(ctx, AddressesService_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressesServiceClient) Delete(ctx context.Context, opts ...grpc.CallOption) (AddressesService_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddressesService_ServiceDesc.Streams[5], AddressesService_Delete_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &addressesServiceDeleteClient{stream}
	return x, nil
}

type AddressesService_DeleteClient interface {
	Send(*input.UUIDRequest) error
	CloseAndRecv() (*output.PersistenceDataResponse, error)
	grpc.ClientStream
}

type addressesServiceDeleteClient struct {
	grpc.ClientStream
}

func (x *addressesServiceDeleteClient) Send(m *input.UUIDRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addressesServiceDeleteClient) CloseAndRecv() (*output.PersistenceDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(output.PersistenceDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AddressesServiceServer is the server API for AddressesService service.
// All implementations must embed UnimplementedAddressesServiceServer
// for forward compatibility
type AddressesServiceServer interface {
	Paginate(*input.PaginationRequest, AddressesService_PaginateServer) error
	Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error)
	Create(AddressesService_CreateServer) error
	Update(AddressesService_UpdateServer) error
	Inactive(AddressesService_InactiveServer) error
	Active(AddressesService_ActiveServer) error
	FindOne(context.Context, *input.UUIDRequest) (*AddressesResponse, error)
	Delete(AddressesService_DeleteServer) error
	mustEmbedUnimplementedAddressesServiceServer()
}

// UnimplementedAddressesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressesServiceServer struct {
}

func (UnimplementedAddressesServiceServer) Paginate(*input.PaginationRequest, AddressesService_PaginateServer) error {
	return status.Errorf(codes.Unimplemented, "method Paginate not implemented")
}
func (UnimplementedAddressesServiceServer) Count(context.Context, *input.FilteredRequest) (*output.CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedAddressesServiceServer) Create(AddressesService_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAddressesServiceServer) Update(AddressesService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAddressesServiceServer) Inactive(AddressesService_InactiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedAddressesServiceServer) Active(AddressesService_ActiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedAddressesServiceServer) FindOne(context.Context, *input.UUIDRequest) (*AddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedAddressesServiceServer) Delete(AddressesService_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAddressesServiceServer) mustEmbedUnimplementedAddressesServiceServer() {}

// UnsafeAddressesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressesServiceServer will
// result in compilation errors.
type UnsafeAddressesServiceServer interface {
	mustEmbedUnimplementedAddressesServiceServer()
}

func RegisterAddressesServiceServer(s grpc.ServiceRegistrar, srv AddressesServiceServer) {
	s.RegisterService(&AddressesService_ServiceDesc, srv)
}

func _AddressesService_Paginate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(input.PaginationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddressesServiceServer).Paginate(m, &addressesServicePaginateServer{stream})
}

type AddressesService_PaginateServer interface {
	Send(*AddressesResponse) error
	grpc.ServerStream
}

type addressesServicePaginateServer struct {
	grpc.ServerStream
}

func (x *addressesServicePaginateServer) Send(m *AddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AddressesService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.FilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressesService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServiceServer).Count(ctx, req.(*input.FilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressesService_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddressesServiceServer).Create(&addressesServiceCreateServer{stream})
}

type AddressesService_CreateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*AddressesRequest, error)
	grpc.ServerStream
}

type addressesServiceCreateServer struct {
	grpc.ServerStream
}

func (x *addressesServiceCreateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addressesServiceCreateServer) Recv() (*AddressesRequest, error) {
	m := new(AddressesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AddressesService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddressesServiceServer).Update(&addressesServiceUpdateServer{stream})
}

type AddressesService_UpdateServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*AddressesRequest, error)
	grpc.ServerStream
}

type addressesServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *addressesServiceUpdateServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addressesServiceUpdateServer) Recv() (*AddressesRequest, error) {
	m := new(AddressesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AddressesService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddressesServiceServer).Inactive(&addressesServiceInactiveServer{stream})
}

type AddressesService_InactiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type addressesServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *addressesServiceInactiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addressesServiceInactiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AddressesService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddressesServiceServer).Active(&addressesServiceActiveServer{stream})
}

type AddressesService_ActiveServer interface {
	SendAndClose(*output.StatusDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type addressesServiceActiveServer struct {
	grpc.ServerStream
}

func (x *addressesServiceActiveServer) SendAndClose(m *output.StatusDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addressesServiceActiveServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AddressesService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(input.UUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressesServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressesService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressesServiceServer).FindOne(ctx, req.(*input.UUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressesService_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddressesServiceServer).Delete(&addressesServiceDeleteServer{stream})
}

type AddressesService_DeleteServer interface {
	SendAndClose(*output.PersistenceDataResponse) error
	Recv() (*input.UUIDRequest, error)
	grpc.ServerStream
}

type addressesServiceDeleteServer struct {
	grpc.ServerStream
}

func (x *addressesServiceDeleteServer) SendAndClose(m *output.PersistenceDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addressesServiceDeleteServer) Recv() (*input.UUIDRequest, error) {
	m := new(input.UUIDRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AddressesService_ServiceDesc is the grpc.ServiceDesc for AddressesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "addresses.AddressesService",
	HandlerType: (*AddressesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _AddressesService_Count_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _AddressesService_FindOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Paginate",
			Handler:       _AddressesService_Paginate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Create",
			Handler:       _AddressesService_Create_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _AddressesService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _AddressesService_Inactive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _AddressesService_Active_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _AddressesService_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "addresses.proto",
}
